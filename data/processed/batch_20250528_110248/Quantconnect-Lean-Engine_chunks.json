{
  "source_file": "Quantconnect-Lean-Engine_parsed.json",
  "chunking_config": {
    "chunker_type": "advanced",
    "timestamp": "2025-05-28T11:03:07.781183"
  },
  "statistics": {
    "total_sections": 29,
    "sections_processed": 24,
    "sections_skipped": 5,
    "total_chunks": 83,
    "total_chars": 95479
  },
  "chunks": [
    {
      "chunk_id": "bb4dfa3f7ebffa8d12bde92cdbdc0fb5",
      "content": "[Section 1: Getting Started]\n\n### Introduction\n\nLean Engine is an open-source algorithmic trading engine built for easy strategy research, backtesting and live trading. We integrate with common data providers and brokerages so you can quickly deploy algorithmic trading strategies.\n\nThe core of the LEAN Engine is written in C#; but it operates seamlessly on Linux, Mac and Windows operating systems. It supports algorithms written in Python 3.11 or C#. Lean drives the web-based algorithmic trading platformQuantConnect.\n\n### System Overview\n\n### Developing with Lean CLI\n\nQuantConnect recommendsusing Lean CLIfor local algorithm development. This is because it is a great tool for working with your algorithms locally while still being able to deploy to the cloud and have access to Lean data. It is also able to run algorithms on your local machine with your data through our official docker images.\n\nReference QuantConnects documentation on Lean CLIhere.\n\n### Installation Instructions\n\nThis section will cover how to install lean locally for you to use in your own environment.\n\nRefer to the following readme files for a detailed guide regarding using your local IDE with Lean:\n\nVS CodeVS",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "1",
        "section_title": "Getting Started",
        "section_path": "Getting Started",
        "chunk_index": 0,
        "total_chunks_in_section": 4,
        "start_char": 0,
        "end_char": 1193,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": null,
        "level": 1,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.772015"
      },
      "char_count": 1193,
      "word_count": 184,
      "embedding": null
    },
    {
      "chunk_id": "a12851d84c8567399b101fabe5a25ba7",
      "content": "VS CodeVS\n\nTo install locally, download the zip file with thelatest masterand unzip it to your favorite location. Alternatively, installGitand clone the repo:\n\n$ git clone https://github.com/QuantConnect/Lean.git\n$ cd Lean\n\nMac OS\n\nInstallVisual Studio for MacOpenQuantConnect.Lean.slnin Visual Studio\n\nVisual Studio will automatically start to restore the Nuget packages. If not, in the menu bar,\n\nclickProject > Restore NuGet PackagesIn the menu bar, clickRun > Start Debugging\n\nAlternatively, run the compileddllfile:\n\nclickBuild > Build Allrun the following code:$ cd Lean/Launcher/bin/Debug\n$ dotnet QuantConnect.Lean.Launcher.dll\n\nLinux (Debian, Ubuntu)\n\nInstalldotnet 6Compile Lean Solution$ dotnet build QuantConnect.Lean.slnRun Lean$ cd Launcher/bin/Debug\n$ dotnet QuantConnect.Lean.Launcher.dll\n\nTo set up Interactive Brokers integration, make sure you fix theib-tws-dirandib-controller-dirfields in theconfig.jsonfile with the actual paths to the TWS and the IBController folders respectively. If after all you still receive connection refuse error, try changing theib-portfield in theconfig.jsonfile from 4002 to 4001 to match the settings in your IBGateway/TWS.\n\nWindows",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "1",
        "section_title": "Getting Started",
        "section_path": "Getting Started",
        "chunk_index": 1,
        "total_chunks_in_section": 4,
        "start_char": 1195,
        "end_char": 2378,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": null,
        "level": 1,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.772142"
      },
      "char_count": 1183,
      "word_count": 149,
      "embedding": null
    },
    {
      "chunk_id": "a9128bb253e42552ed9fe9bfb135bdf8",
      "content": "Windows\n\nInstallVisual StudioOpenQuantConnect.Lean.slnin Visual StudioBuild the solution by clickingBuild Menu -> Build SolutionPressF5to run\n\nPython Support\n\nA full explanation of the Python installation process can be found in theAlgorithm.Pythonproject.\n\nLocal-Cloud Hybrid Development\n\nSeamlessly develop locally in your favorite development environment, with full autocomplete and debugging support to quickly and easily identify problems with your strategy. For more information please see theCLI documentation.\n\n### Roadmap\n\nOurRoadmapshows the feature requests and bugs that receive the most attention from community members.\nThe core QuantConnect team gives priority to the feature requests and bugs that have the most votes.\nIf you want to shape the future of QuantConnect and LEAN, vote today.\nTo add a new item to the roadmap,create a new GitHub Issue on the LEAN repositoryand then react to it with a thumbs up emoji.\n\n### Sponsorships",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "1",
        "section_title": "Getting Started",
        "section_path": "Getting Started",
        "chunk_index": 2,
        "total_chunks_in_section": 4,
        "start_char": 2380,
        "end_char": 3328,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": null,
        "level": 1,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.772159"
      },
      "char_count": 948,
      "word_count": 135,
      "embedding": null
    },
    {
      "chunk_id": "8c21101b2e7af92d5631ef012d082d6d",
      "content": "### Sponsorships\n\nSponsor QuantConnect to support our developers as we improve a revolutionary quantitative trading platform LEAN, in an open, collaborative way. We will continue to level the playing field with industry-grade tools and data accessibility. We use sponsorship funds to achieve the following goals:\n\nTo continue the development of LEAN’s infrastructureTo create free, high-quality research and educational materialTo provide continued support for our communityTo make terabytes of data accessible in the Dataset MarketTo bring LEAN to global financial marketsTo increase live trading brokerage connectionsTo connect more individuals with financial institutions so individuals can gain income for their ideas at scale\n\nTo become a QuantConnect sponsor, see theSponsorship pageon GitHub.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "1",
        "section_title": "Getting Started",
        "section_path": "Getting Started",
        "chunk_index": 3,
        "total_chunks_in_section": 4,
        "start_char": 3330,
        "end_char": 4129,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": null,
        "level": 1,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.772171"
      },
      "char_count": 799,
      "word_count": 110,
      "embedding": null
    },
    {
      "chunk_id": "19eab1a1baee2ffdaa771b8eea14f727",
      "content": "[Section 2.1.1: Key Concepts]\n\n### Introduction\n\n### Listing Process\n\nDatasets contributed to LEAN can be quickly listed in the QuantConnect Dataset Marketplace, and distributed for sale to more than 250,000 users in the QuantConnect community. To list a dataset, reach out to theQuantConnect Teamfor  a quick review, then proceed with the data creation and process steps in the following pages.\n\nDatasets must be well defined, with realistic timestamps for when the data was available (\"point in time\"). Ideally datasets need at least a 2 year track record and to be maintained by a reputable company. They should be accompanied with full documentation and code examples so the community can harness the data.\n\n### Data Sources\n\nTheGetSourceget_sourcemethod of your dataset class instructs LEAN where to find the data. This method must return aSubscriptionDataSourceobject, which contains the data location and format. We host your data, so thetransportMediumtransport_mediummust beSubscriptionTransportMedium.LocalFileand theformatmust beFileFormat.Csv.\n\n### TimeZones",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.1",
        "section_title": "Key Concepts",
        "section_path": "Contributions > Datasets > Key Concepts",
        "chunk_index": 0,
        "total_chunks_in_section": 2,
        "start_char": 0,
        "end_char": 1070,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.772484"
      },
      "char_count": 1070,
      "word_count": 150,
      "embedding": null
    },
    {
      "chunk_id": "5baec470faf910a1745190162245b237",
      "content": "### TimeZones\n\nTheDataTimeZonemethod of your data source class declares the time zone of your dataset. This method returns aNodaTime.DateTimeZone object. If your dataset provides trading data and universe data, theDataTimeZonemethods in yourLean.DataSource.<vendorNameDatasetName> / <vendorNameDatasetName>.csandLean.DataSource.<vendorNameDatasetName> / <vendorNameDatasetName>Universe.csfiles must be the same.\n\n### Linked Datasets\n\nYour dataset is linked if any of the following statements are true:\n\nYour dataset describes market price properties of specific securities (for example, the closing price of AAPL).Your alternative dataset is linked to individual securities (for example, the Wikipedia page view count of AAPL).\n\nExamples of unlinked datasets would be the weather of New York City, where data is not relevant to a specific security.\n\nWhen a dataset is linked, it needs to be mapped to underlying assets through time.\nTheRequiresMappingboolean instructs LEAN to handle the security and ticker mapping issues.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.1",
        "section_title": "Key Concepts",
        "section_path": "Contributions > Datasets > Key Concepts",
        "chunk_index": 1,
        "total_chunks_in_section": 2,
        "start_char": 1072,
        "end_char": 2095,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.772499"
      },
      "char_count": 1023,
      "word_count": 134,
      "embedding": null
    },
    {
      "chunk_id": "aa3aa5855aebf9968e1140c94f63566b",
      "content": "[Section 2.1.2: Defining Data Models]\n\n### Introduction\n\nThis page explains how to set up the data source SDK and use it to create data models.\n\n### Part 1/ Set up SDK\n\nFollow these steps to create a repository for your dataset:",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.2",
        "section_title": "Defining Data Models",
        "section_path": "Contributions > Datasets > Defining Data Models",
        "chunk_index": 0,
        "total_chunks_in_section": 8,
        "start_char": 0,
        "end_char": 228,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.773146"
      },
      "char_count": 228,
      "word_count": 41,
      "embedding": null
    },
    {
      "chunk_id": "3c4e4c995730db7a6d8662cf128a44c0",
      "content": "Follow these steps to create a repository for your dataset:\n\nOpen theLean.DataSource.SDK repositoryand clickUse this template > Create a new repository.Start with the SDK repository instead of existing data source implementations because we periodically update the SDK repository.On the Create a new repository from Lean.DataSource.SDK page, set the repository name toLean.DataSource.<vendorNameDatasetName>(for example,Lean.DataSource.XYZAirlineTicketSales).If your dataset contains multiple series, use<vendorName>instead of<vendorNameDatasetName>. For instance, the Federal Reserve Economic Data (FRED) dataset repository has the nameLean.DataSource.FREDbecause it hasmany different series.ClickCreate repository from template.ClonetheLean.DataSource.<vendorNameDatasetName>repository.$ git clone https://github.com/username/Lean.DataSource.<vendorNameDatasetName>.gitIf you're on a Linux terminal, in yourLean.DataSource.<vendorNameDatasetName>directory, change the access permissions of the bash script.$ chmod +x ./renameDatasetIn yourLean.DataSource.<vendorNameDatasetName>directory, run therenameDataset.shbash script.$ renameDataset.shThe bash script replaces some placeholder text in theLean.DataSource.<vendorNameDatasetName>directory and renames some files according to your dataset's<vendorNameDatasetName>.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.2",
        "section_title": "Defining Data Models",
        "section_path": "Contributions > Datasets > Defining Data Models",
        "chunk_index": 1,
        "total_chunks_in_section": 8,
        "start_char": 230,
        "end_char": 1550,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.773168"
      },
      "char_count": 1320,
      "word_count": 121,
      "embedding": null
    },
    {
      "chunk_id": "5a048745d9052deaac554d816620f628",
      "content": "Open theLean.DataSource.SDK repositoryand clickUse this template > Create a new repository.Start with the SDK repository instead of existing data source implementations because we periodically update the SDK repository.On the Create a new repository from Lean.DataSource.SDK page, set the repository name toLean.DataSource.<vendorNameDatasetName>(for example,Lean.DataSource.XYZAirlineTicketSales).If your dataset contains multiple series, use<vendorName>instead of<vendorNameDatasetName>. For instance, the Federal Reserve Economic Data (FRED) dataset repository has the nameLean.DataSource.FREDbecause it hasmany different series.ClickCreate repository from template.ClonetheLean.DataSource.<vendorNameDatasetName>repository.$ git clone https://github.com/username/Lean.DataSource.<vendorNameDatasetName>.gitIf you're on a Linux terminal, in yourLean.DataSource.<vendorNameDatasetName>directory, change the access permissions of the bash script.$ chmod +x ./renameDatasetIn yourLean.DataSource.<vendorNameDatasetName>directory, run therenameDataset.shbash script.$ renameDataset.shThe bash script replaces some placeholder text in theLean.DataSource.<vendorNameDatasetName>directory and renames some files according to your dataset's<vendorNameDatasetName>.\n\n### Part 2/ Create Data Models",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.2",
        "section_title": "Defining Data Models",
        "section_path": "Contributions > Datasets > Defining Data Models",
        "chunk_index": 2,
        "total_chunks_in_section": 8,
        "start_char": 1552,
        "end_char": 2843,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.773189"
      },
      "char_count": 1291,
      "word_count": 117,
      "embedding": null
    },
    {
      "chunk_id": "69bc04b966225bd8d77df832c5a7e414",
      "content": "### Part 2/ Create Data Models\n\nThe input to your model should be one or manyCSVfiles that are in chronological order.\n\n1997-01-01,905.2,941.4,905.2,939.55,38948210,978.21\n1997-01-02,941.95,944,925.05,927.05,49118380,1150.42\n1997-01-03,924.3,932.6,919.55,931.65,35263845,866.74\n...\n2014-07-24,7796.25,7835.65,7771.65,7830.6,117608370,6271.45\n2014-07-25,7828.2,7840.95,7748.6,7790.45,153936037,7827.61\n2014-07-28,7792.9,7799.9,7722.65,7748.7,116534670,6107.78\n\nIf you don't already have these CSV files, you'll create them later during the Rendering Data part of this tutorial series. For this part of the contribution process, consider using a \"toy example\" file to establish the format and requirements.\n\nFollow these steps to define the data source class:",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.2",
        "section_title": "Defining Data Models",
        "section_path": "Contributions > Datasets > Defining Data Models",
        "chunk_index": 3,
        "total_chunks_in_section": 8,
        "start_char": 2845,
        "end_char": 3602,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.773201"
      },
      "char_count": 757,
      "word_count": 77,
      "embedding": null
    },
    {
      "chunk_id": "64965cc7c65bccb88869602301697b6c",
      "content": "Follow these steps to define the data source class:\n\nOpen theLean.DataSource.<vendorNameDatasetName> / <vendorNameDatasetName>.csfile.Follow these steps to define the properties of your dataset:Duplicate lines 32-36 for as many properties as there are in your dataset.Rename theSomeCustomPropertyproperties to the names of your dataset properties (for example,Destination).If your dataset is a streaming dataset like theBenzinga News Feed, change the argument that is passed to theProtoMembermembers so that they start at 10 and increment by one for each additional property in your dataset.If your dataset isn't a streaming dataset, delete theProtoMemberproperty decorators.Replace the “Some custom data property” comments with a description of each property in your dataset.If your dataset contains multiple series, like theFRED dataset, create a helper class file inLean.DataSource.<vendorNameDatasetName>directory to map the series name to the series code. For a full example, see theLIBOR.cs filein the Lean.DataSource.FRED repository. The helper class makes it easier for members to subscribe to the series in your dataset because they don't need to know the series code. For instance, you can subscribe to the 1-Week London Interbank Offered Rate (LIBOR) based on U.S. Dollars with the following code snippet:AddData<Fred>(Fred.LIBOR.OneWeekBasedOnUSD);\n// Instead of\n// AddData<Fred>(\"USD1WKD156N\");self.add_data(Fred, Fred.LIBOR.one_week_based_on_usd)\n# Instead of\n# self.add_data(Fred, \"USD1WKD156N\")Define theGetSourcemethod to point to the path of your dataset file(s).If your dataset is organized across multipleCSVfiles, use theconfig.Symbol.Valuestring to build the file path.config.Symbol.Valueis the string value of the argument you pass to theAddDatamethod when you subscribe to the dataset. An example output file path is/ output / alternative / xyzairline / ticketsales / dal.csv.Define theReaderreadermethod to return instances of your dataset class.SetSymbol = config.Symboland setEndTimeend_timeto the time that the datapoint first became available for consumption.Your data class inherits from theBaseDataclass, which hasValueandTimetimeproperties. Set theValueproperty to one of the factors in your dataset. If you don't set theTimetimeproperty, its default value is the value ofEndTimeend_time. For more information about theTimetimeandEndTimeend_timeproperties, seePeriods.Define theDataTimeZonemethod.public class VendorNameDatasetName : BaseData\n{\npublic override DateTimeZone DataTimeZone()\n{\nreturn DateTimeZone.Utc;\n}\n}If you importusing QuantConnect, theTimeZonesclass provides helper attributes to createDateTimeZoneobjects. For example, you can useTimeZones.UtcorTimeZones.NewYork. For more information about time zones, seeTime Zones.Define theSupportedResolutionsmethod.public class VendorNameDatasetName : BaseData\n{\npublic override List<Resolution> SupportedResolutions()\n{\nreturn DailyResolution;\n}\n}TheResolutionenumeration has the following members:Define theDefaultResolutionmethod.If a member doesn't specify a resolution when they subscribe to your dataset, Lean uses theDefaultResolution.public class VendorNameDatasetName : BaseData\n{\npublic override Resolution DefaultResolution()\n{\nreturn Resolution.Daily;\n}\n}Define theIsSparseDatamethod.If your dataset is not tick resolution and your dataset is missing data for at least one sample, it's sparse. If your dataset is sparse, we disable logging for missing files.public class VendorNameDatasetName : BaseData\n{\npublic override bool IsSparseData()\n{\nreturn true;\n}\n}Define theRequiresMappingmethod.public class VendorNameDatasetName : BaseData\n{\npublic override bool RequiresMapping()\n{\nreturn true;\n}\n}Define theClonemethod.public class VendorNameDatasetName : BaseData\n{\npublic override BaseData Clone()\n{\nreturn new VendorNameDatasetName\n{\nSymbol = Symbol,\nTime = Time,\nEndTime = EndTime,\nSomeCustomProperty = SomeCustomProperty,\n};\n}\n}Define theToStringmethod.public class VendorNameDatasetName : BaseData\n{\npublic override string ToString()\n{\nreturn $\"{Symbol} - {SomeCustomProperty}\";\n}\n}",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.2",
        "section_title": "Defining Data Models",
        "section_path": "Contributions > Datasets > Defining Data Models",
        "chunk_index": 4,
        "total_chunks_in_section": 8,
        "start_char": 3604,
        "end_char": 7696,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.773210"
      },
      "char_count": 4092,
      "word_count": 498,
      "embedding": null
    },
    {
      "chunk_id": "a757d30f6b4bd238ea765824671833bc",
      "content": "Open theLean.DataSource.<vendorNameDatasetName> / <vendorNameDatasetName>.csfile.Follow these steps to define the properties of your dataset:Duplicate lines 32-36 for as many properties as there are in your dataset.Rename theSomeCustomPropertyproperties to the names of your dataset properties (for example,Destination).If your dataset is a streaming dataset like theBenzinga News Feed, change the argument that is passed to theProtoMembermembers so that they start at 10 and increment by one for each additional property in your dataset.If your dataset isn't a streaming dataset, delete theProtoMemberproperty decorators.Replace the “Some custom data property” comments with a description of each property in your dataset.If your dataset contains multiple series, like theFRED dataset, create a helper class file inLean.DataSource.<vendorNameDatasetName>directory to map the series name to the series code. For a full example, see theLIBOR.cs filein the Lean.DataSource.FRED repository. The helper class makes it easier for members to subscribe to the series in your dataset because they don't need to know the series code. For instance, you can subscribe to the 1-Week London Interbank Offered Rate (LIBOR) based on U.S. Dollars with the following code snippet:AddData<Fred>(Fred.LIBOR.OneWeekBasedOnUSD);\n// Instead of\n// AddData<Fred>(\"USD1WKD156N\");self.add_data(Fred, Fred.LIBOR.one_week_based_on_usd)\n# Instead of\n# self.add_data(Fred, \"USD1WKD156N\")Define theGetSourcemethod to point to the path of your dataset file(s).If your dataset is organized across multipleCSVfiles, use theconfig.Symbol.Valuestring to build the file path.config.Symbol.Valueis the string value of the argument you pass to theAddDatamethod when you subscribe to the dataset. An example output file path is/ output / alternative / xyzairline / ticketsales / dal.csv.Define theReaderreadermethod to return instances of your dataset class.SetSymbol = config.Symboland setEndTimeend_timeto the time that the datapoint first became available for consumption.Your data class inherits from theBaseDataclass, which hasValueandTimetimeproperties. Set theValueproperty to one of the factors in your dataset. If you don't set theTimetimeproperty, its default value is the value ofEndTimeend_time. For more information about theTimetimeandEndTimeend_timeproperties, seePeriods.Define theDataTimeZonemethod.public class VendorNameDatasetName : BaseData\n{\npublic override DateTimeZone DataTimeZone()\n{\nreturn DateTimeZone.Utc;\n}\n}If you importusing QuantConnect, theTimeZonesclass provides helper attributes to createDateTimeZoneobjects. For example, you can useTimeZones.UtcorTimeZones.NewYork. For more information about time zones, seeTime Zones.Define theSupportedResolutionsmethod.public class VendorNameDatasetName : BaseData\n{\npublic override List<Resolution> SupportedResolutions()\n{\nreturn DailyResolution;\n}\n}TheResolutionenumeration has the following members:Define theDefaultResolutionmethod.If a member doesn't specify a resolution when they subscribe to your dataset, Lean uses theDefaultResolution.public class VendorNameDatasetName : BaseData\n{\npublic override Resolution DefaultResolution()\n{\nreturn Resolution.Daily;\n}\n}Define theIsSparseDatamethod.If your dataset is not tick resolution and your dataset is missing data for at least one sample, it's sparse. If your dataset is sparse, we disable logging for missing files.public class VendorNameDatasetName : BaseData\n{\npublic override bool IsSparseData()\n{\nreturn true;\n}\n}Define theRequiresMappingmethod.public class VendorNameDatasetName : BaseData\n{\npublic override bool RequiresMapping()\n{\nreturn true;\n}\n}Define theClonemethod.public class VendorNameDatasetName : BaseData\n{\npublic override BaseData Clone()\n{\nreturn new VendorNameDatasetName\n{\nSymbol = Symbol,\nTime = Time,\nEndTime = EndTime,\nSomeCustomProperty = SomeCustomProperty,\n};\n}\n}Define theToStringmethod.public class VendorNameDatasetName : BaseData\n{\npublic override string ToString()\n{\nreturn $\"{Symbol} - {SomeCustomProperty}\";\n}\n}\n\n### Part 3/ Create Universe Models",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.2",
        "section_title": "Defining Data Models",
        "section_path": "Contributions > Datasets > Defining Data Models",
        "chunk_index": 5,
        "total_chunks_in_section": 8,
        "start_char": 7698,
        "end_char": 11773,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.773252"
      },
      "char_count": 4075,
      "word_count": 495,
      "embedding": null
    },
    {
      "chunk_id": "4d87af30535efcdb3a907db935655009",
      "content": "### Part 3/ Create Universe Models\n\nIf your dataset doesn't provide universe data, follow these steps:\n\nDelete theLean.DataSource.<vendorNameDatasetName> / <vendorNameDatasetName>Universe.cs.Delete theLean.DataSource.<vendorNameDatasetName> / <vendorNameDatasetName>UniverseSelectionAlgorithm.*files.In theLean.DataSource.<vendorNameDatasetName> / tests / Tests.csprojfile, delete the code on line 8 that compiles the universe selection algorithms.Skip the rest of this page.\n\nThe input to your model should be manyCSVfiles where the first column is thesecurity identifierand the second column is the point-in-time ticker.\n\nA R735QTJ8XC9X,A,17.19,109700,1885743,False,0.9904858,1\nAA R735QTJ8XC9X,AA,71.25,513400,36579750,False,0.3992678,0.750075\nAAB R735QTJ8XC9X,AAB,16.38,5000,81900,False,0.9902758,1\n...\nZSEV R735QTJ8XC9X,ZSEV,10.5,800,8400,False,0.8981684,1\nZTR R735QTJ8XC9X,ZTR,9.56,102300,977988,False,0.0803037,3.97015016\nZVX R735QTJ8XC9X,ZVX,10,15600,156000,False,1,0.666667\n\nFollow these steps to define the data source class:",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.2",
        "section_title": "Defining Data Models",
        "section_path": "Contributions > Datasets > Defining Data Models",
        "chunk_index": 6,
        "total_chunks_in_section": 8,
        "start_char": 11775,
        "end_char": 12809,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.773280"
      },
      "char_count": 1034,
      "word_count": 89,
      "embedding": null
    },
    {
      "chunk_id": "26a9b6893be10747e9470d5d74151f22",
      "content": "Follow these steps to define the data source class:\n\nOpen theLean.DataSource.<vendorNameDatasetName> / <vendorNameDatasetName>Universe.csfile.Follow these steps to define the properties of your dataset:Duplicate lines 33-36 or 38-41 (depending on the data type) for as many properties as there are in your dataset.Rename theSomeCustomProperty/SomeNumericPropertyproperties to the names of your dataset properties (for example,Destination/FlightPassengerCount).Replace the “Some custom data property” comments with a description of each property in your dataset.Define theGetSourcemethod to point to the path of your dataset file(s).Use thedateparameter as the file name to get theDateTimeof data being requested. Example output file paths are/ output / alternative / xyzairline / ticketsales / universe / 20200320.csvfor daily data and/ output / alternative / xyzairline / ticketsales / universe / 2020032000.csvfor hourly data.Define theReaderreadermethod to return instances of your universe class.The first column in your data file must be the security identifier and the second column must be the point-in-time ticker. With this configuration, usenew Symbol(SecurityIdentifier.Parse(csv[0]), csv[1])to create the securitySymbol.The date in your data file must be the date that the data point is available for consumption. With this configuration, set theTimetimetodate - Period.Define theDataTimeZonemethod.public class VendorNameDatasetNameUniverse : BaseData\n{\npublic override DateTimeZone DataTimeZone()\n{\nreturn DateTimeZone.Utc;\n}\n}If you importusing QuantConnect, theTimeZonesclass provides helper attributes to createDateTimeZoneobjects. For example, you can useTimeZones.UtcorTimeZones.NewYork. For more information about time zones, seeTime Zones.Define theSupportedResolutionsmethod.public class VendorNameDatasetNameUniverse : BaseData\n{\npublic override List<Resolution> SupportedResolutions()\n{\nreturn DailyResolution;\n}\n}Universe data must have hour or daily resolution.TheResolutionenumeration has the following members:Define theDefaultResolutionmethod.If a member doesn't specify a resolution when they subscribe to your dataset, Lean uses theDefaultResolution.public class VendorNameDatasetNameUniverse : BaseData\n{\npublic override Resolution DefaultResolution()\n{\nreturn Resolution.Daily;\n}\n}Define theIsSparseDatamethod.If your dataset is not tick resolution and your dataset is missing data for at least one sample, it's sparse. If your dataset is sparse, we disable logging for missing files.public class VendorNameDatasetNameUniverse : BaseData\n{\npublic override bool IsSparseData()\n{\nreturn true;\n}\n}Define theRequiresMappingmethod.public class VendorNameDatasetNameUniverse : BaseData\n{\npublic override bool RequiresMapping()\n{\nreturn true;\n}\n}Define theClonemethod.public class VendorNameDatasetNameUniverse : BaseData\n{\npublic override BaseData Clone()\n{\nreturn new VendorNameDatasetName\n{\nSymbol = Symbol,\nTime = Time,\nEndTime = EndTime,\nSomeCustomProperty = SomeCustomProperty,\n};\n}\n}Define theToStringmethod.public class VendorNameDatasetNameUniverse : BaseData\n{\npublic override string ToString()\n{\nreturn $\"{Symbol} - {SomeCustomProperty}\";\n}\n}",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.2",
        "section_title": "Defining Data Models",
        "section_path": "Contributions > Datasets > Defining Data Models",
        "chunk_index": 7,
        "total_chunks_in_section": 8,
        "start_char": 12811,
        "end_char": 15990,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.773289"
      },
      "char_count": 3179,
      "word_count": 380,
      "embedding": null
    },
    {
      "chunk_id": "ba607e38349c18d500bd0be759dee3bc",
      "content": "[Section 2.1.3.1: Rendering Data with Python]\n\n### Introduction\n\nThis page explains how to create a script to download and process your dataset with Python for QuantConnect distribution.\n\n### Using Processing Framework\n\nDuring this part of the contribution process, you need to edit theLean.DataSource.<vendorNameDatasetName> / DataProcessing / process.sample.pyfile so it transforms and moves your raw data into the format and location theGetSource methodsexpect.\nThe script should save all the data history to theoutputdirectory in your machine's root directory (for example,C: / output) and it should save a sample of the data history to theLean.DataSource.<vendorNameDatasetName> / outputdirectory.\n\nFollow these steps to set up the downloading and processing script for your dataset:",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.3.1",
        "section_title": "Rendering Data with Python",
        "section_path": "Contributions > Datasets > Rendering Data > Rendering Data with Python",
        "chunk_index": 0,
        "total_chunks_in_section": 4,
        "start_char": 0,
        "end_char": 788,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1.3",
        "level": 4,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.773592"
      },
      "char_count": 788,
      "word_count": 109,
      "embedding": null
    },
    {
      "chunk_id": "d27682a55b8da0ba02c00400f18c2649",
      "content": "Follow these steps to set up the downloading and processing script for your dataset:\n\nChange the structure of theLean.DataSource.<vendorNameDatasetName> / outputdirectory to match the path structure you defined in theGetSourceget_sourcemethods (for example,output / alternative / xyzairline / ticketsales).In theLean.DataSource.<vendorNameDatasetName> / DataProcessing / process.sample.pyfile, add some code to time how long it takes to process the entire dataset and how long it takes to update the dataset with one day's worth of data.You need this information for when you provide thedataset documentation. We need to know how long it takes to process your dataset so we can schedule its processing job.In the processing file, load the raw data from your source.You can fetch data from any of the following sources:SourceConsiderationsLocal FilesIt can help to first copy the data into location.Remote APIStay within the rate limits. You can use the rate gate class.You should load and process the data period by period. Use the date range provided to the script to process the specific dates provided.If your dataset is for universe selection data and it's at a higher frequency than hour resolution, resample your data to hourly or daily resolution.If any of the following statements are true, skip the rest of the steps in this tutorial:",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.3.1",
        "section_title": "Rendering Data with Python",
        "section_path": "Contributions > Datasets > Rendering Data > Rendering Data with Python",
        "chunk_index": 1,
        "total_chunks_in_section": 4,
        "start_char": 790,
        "end_char": 2133,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1.3",
        "level": 4,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.773604"
      },
      "char_count": 1343,
      "word_count": 204,
      "embedding": null
    },
    {
      "chunk_id": "b87e722034ea882cbbe4ea51ee48ec78",
      "content": "Change the structure of theLean.DataSource.<vendorNameDatasetName> / outputdirectory to match the path structure you defined in theGetSourceget_sourcemethods (for example,output / alternative / xyzairline / ticketsales).In theLean.DataSource.<vendorNameDatasetName> / DataProcessing / process.sample.pyfile, add some code to time how long it takes to process the entire dataset and how long it takes to update the dataset with one day's worth of data.You need this information for when you provide thedataset documentation. We need to know how long it takes to process your dataset so we can schedule its processing job.In the processing file, load the raw data from your source.You can fetch data from any of the following sources:SourceConsiderationsLocal FilesIt can help to first copy the data into location.Remote APIStay within the rate limits. You can use the rate gate class.You should load and process the data period by period. Use the date range provided to the script to process the specific dates provided.If your dataset is for universe selection data and it's at a higher frequency than hour resolution, resample your data to hourly or daily resolution.If any of the following statements are true, skip the rest of the steps in this tutorial:\n\nYour dataset is not linked to Equities.Your dataset is related to Equities and already includes the point-in-time tickers.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.3.1",
        "section_title": "Rendering Data with Python",
        "section_path": "Contributions > Datasets > Rendering Data > Rendering Data with Python",
        "chunk_index": 2,
        "total_chunks_in_section": 4,
        "start_char": 2135,
        "end_char": 3516,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1.3",
        "level": 4,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.773617"
      },
      "char_count": 1381,
      "word_count": 208,
      "embedding": null
    },
    {
      "chunk_id": "56acc291cc3f92190428d7880dae15d5",
      "content": "Your dataset is not linked to Equities.Your dataset is related to Equities and already includes the point-in-time tickers.\n\nIf your dataset is related to Equities and your dataset doesn't account for ticker changes, the rest of the steps help you to adjust the tickers over the historical data so they are point-in-time.\n\n$ dotnet build .\\DataProcessing\\DataProcessing.csproj\n\nThis step generates a file that theCLRImportslibrary uses.\n\nfrom CLRImports import *\n\nmap_file_provider = LocalZipMapFileProvider()\nmap_file_provider.Initialize(DefaultDataProvider())\n\nsid = SecurityIdentifier.generate_equity(point_in_time_ticker,\nMarket.USA, True, map_file_provider, csv_date)\n\nYou need to place the script under thebindirectory so that LEAN's packages dlls are correctly loaded for theCLRImports.\n\n$ cp process.sample.py DataProcessing/bin/Debug/net9.0\n\n### Python Processor Examples\n\nThe following examples are rendering datasets with Python processing:\n\nLean.DataSource.BitcoinMetadataLean.DataSource.BrainSentimentLean.DataSource.CryptoSlamNFTSaleLean.DataSource.QuiverQuantTwitterFollowersLean.DataSource.Regalytics",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.3.1",
        "section_title": "Rendering Data with Python",
        "section_path": "Contributions > Datasets > Rendering Data > Rendering Data with Python",
        "chunk_index": 3,
        "total_chunks_in_section": 4,
        "start_char": 3518,
        "end_char": 4633,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1.3",
        "level": 4,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.773629"
      },
      "char_count": 1115,
      "word_count": 115,
      "embedding": null
    },
    {
      "chunk_id": "578fe79caa2276851c14722944fb6455",
      "content": "[Section 2.1.3.2: Rendering Data with CSharp]\n\n### Introduction\n\nThis page explains how to create a script to download and process your dataset with C# for QuantConnect distribution.\n\n### Using Processing Framework\n\nDuring this part of the contribution process, you need to edit theLean.DataSource.<vendorNameDatasetName> / DataProcessing / Program.csfile so it transforms and moves your raw data into the format and location theGetSource methodsexpect.\nThe program should save all the data history to theoutputdirectory in your machine's root directory (for example,C: / output) and it should save a sample of the data history to theLean.DataSource.<vendorNameDatasetName> / outputdirectory.\n\nFollow these steps to set up the downloading and processing script for your dataset:",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.3.2",
        "section_title": "Rendering Data with CSharp",
        "section_path": "Contributions > Datasets > Rendering Data > Rendering Data with CSharp",
        "chunk_index": 0,
        "total_chunks_in_section": 4,
        "start_char": 0,
        "end_char": 778,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1.3",
        "level": 4,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.773861"
      },
      "char_count": 778,
      "word_count": 109,
      "embedding": null
    },
    {
      "chunk_id": "1a6188e72cffd99020e32067639067d0",
      "content": "Follow these steps to set up the downloading and processing script for your dataset:\n\nChange the structure of theLean.DataSource.<vendorNameDatasetName> / outputdirectory to match the path structure you defined in theGetSourceget_sourcemethods (for example,output / alternative / xyzairline / ticketsales).In theLean.DataSource.<vendorNameDatasetName> / DataProcessing / Program.csfile, add some code to time how long it takes to process the entire dataset and how long it takes to update the dataset with one day's worth of data.You need this information for when you provide thedataset documentation. We need to know how long it takes to process your dataset so we can schedule its processing job.In the processing file, load the raw data from your source.You can fetch data from any of the following sources:SourceConsiderationsLocal FilesIt can help to first copy the data into location.Remote APIStay within the rate limits. You can use the rate gate class.You should load and process the data period by period. Use the date range provided to the script to process the specific dates provided.If your dataset is for universe selection data and it's at a higher frequency than hour resolution, resample your data to hourly or daily resolution.If any of the following statements are true, skip the rest of the steps in this tutorial:",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.3.2",
        "section_title": "Rendering Data with CSharp",
        "section_path": "Contributions > Datasets > Rendering Data > Rendering Data with CSharp",
        "chunk_index": 1,
        "total_chunks_in_section": 4,
        "start_char": 780,
        "end_char": 2116,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1.3",
        "level": 4,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.773872"
      },
      "char_count": 1336,
      "word_count": 204,
      "embedding": null
    },
    {
      "chunk_id": "74db5461387e7d7dc285e1f845d5994b",
      "content": "Change the structure of theLean.DataSource.<vendorNameDatasetName> / outputdirectory to match the path structure you defined in theGetSourceget_sourcemethods (for example,output / alternative / xyzairline / ticketsales).In theLean.DataSource.<vendorNameDatasetName> / DataProcessing / Program.csfile, add some code to time how long it takes to process the entire dataset and how long it takes to update the dataset with one day's worth of data.You need this information for when you provide thedataset documentation. We need to know how long it takes to process your dataset so we can schedule its processing job.In the processing file, load the raw data from your source.You can fetch data from any of the following sources:SourceConsiderationsLocal FilesIt can help to first copy the data into location.Remote APIStay within the rate limits. You can use the rate gate class.You should load and process the data period by period. Use the date range provided to the script to process the specific dates provided.If your dataset is for universe selection data and it's at a higher frequency than hour resolution, resample your data to hourly or daily resolution.If any of the following statements are true, skip the rest of the steps in this tutorial:\n\nYour dataset is not related to Equities.Your dataset is related to Equities and already includes the point-in-time tickers.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.3.2",
        "section_title": "Rendering Data with CSharp",
        "section_path": "Contributions > Datasets > Rendering Data > Rendering Data with CSharp",
        "chunk_index": 2,
        "total_chunks_in_section": 4,
        "start_char": 2118,
        "end_char": 3493,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1.3",
        "level": 4,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.773884"
      },
      "char_count": 1375,
      "word_count": 208,
      "embedding": null
    },
    {
      "chunk_id": "db151aa61efa62a7a3cfaa5b8c21c556",
      "content": "Your dataset is not related to Equities.Your dataset is related to Equities and already includes the point-in-time tickers.\n\nIf your dataset is related to Equities and your dataset doesn't account for ticker changes, the rest of the steps help you to adjust the tickers over the historical data so they are point-in-time.\n\nvar mapFileProvider = new LocalZipMapFileProvider();\nvar mapFileProvider.Initialize(new DefaultDataProvider());\n\nvar sid = SecurityIdentifier.GenerateEquity(pointInIimeTicker,\nMarket.USA, true, mapFileProvider, csvDate)\n\nAfter you finish compiling theProgram.csfile, run theprocess.exefile to populate theLean.DataSource.<vendorNameDatasetName> / outputdirectory and theoutputdirectory in your machine's root directory.\n\nNote: The pull request you make at the end must contain sample data so we can review it and run the demonstration algorithms.\n\n### CSharp Processor Examples\n\nThe following examples are rendering datasets with C# processing:\n\nLean.DataSource.BinanceFundingRateLean.DataSource.CoinGeckoLean.DataSource.CryptoCoarseFundamentalUniverseLean.DataSource.QuiverInsiderTradingLean.DataSource.VIXCentral",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.3.2",
        "section_title": "Rendering Data with CSharp",
        "section_path": "Contributions > Datasets > Rendering Data > Rendering Data with CSharp",
        "chunk_index": 3,
        "total_chunks_in_section": 4,
        "start_char": 3495,
        "end_char": 4632,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1.3",
        "level": 4,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.773895"
      },
      "char_count": 1137,
      "word_count": 124,
      "embedding": null
    },
    {
      "chunk_id": "12a36cc7bdd6fd7cea6049f08b9a955a",
      "content": "[Section 2.1.3.3: Rendering Data with Notebooks]\n\n### Introduction\n\nThis page explains how to create a script to download and process your dataset with Jupyter Notebooks for QuantConnect distribution.\n\n### Using Processing Framework\n\nDuring this part of the contribution process, you need to edit theLean.DataSource.<vendorNameDatasetName> / DataProcessing / process.sample.ipynbfile so it transforms and moves your raw data into the format and location theGetSource methodsexpect.\nThe notebook should save all the data history to theoutputdirectory in your machine's root directory (for example,C: / output) and it should save a sample of the data history to theLean.DataSource.<vendorNameDatasetName> / outputdirectory.\n\nFollow these steps to set up the downloading and processing script for your dataset:",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.3.3",
        "section_title": "Rendering Data with Notebooks",
        "section_path": "Contributions > Datasets > Rendering Data > Rendering Data with Notebooks",
        "chunk_index": 0,
        "total_chunks_in_section": 4,
        "start_char": 0,
        "end_char": 807,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1.3",
        "level": 4,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.774145"
      },
      "char_count": 807,
      "word_count": 110,
      "embedding": null
    },
    {
      "chunk_id": "599102e3d4d38fb7d233aecfe78f921e",
      "content": "Follow these steps to set up the downloading and processing script for your dataset:\n\nChange the structure of theLean.DataSource.<vendorNameDatasetName> / outputdirectory to match the path structure you defined in theGetSourceget_sourcemethods (for example,output / alternative / xyzairline / ticketsales).In theLean.DataSource.<vendorNameDatasetName> / DataProcessing / process.sample.ipynbfile, add some code to time how long it takes to process the entire dataset and how long it takes to update the dataset with one day's worth of data.You need this information for when you provide thedataset documentation. We need to know how long it takes to process your dataset so we can schedule its processing job.In the processing file, load the raw data from your source.You can fetch data from any of the following sources:SourceConsiderationsLocal FilesIt can help to first copy the data into location.Remote APIStay within the rate limits. You can use the rate gate class.You should load and process the data period by period. Use the date range provided to the script to process the specific dates provided.If your dataset is for universe selection data and it's at a higher frequency than hour resolution, resample your data to hourly or daily resolution.If any of the following statements are true, skip the rest of the steps in this tutorial:",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.3.3",
        "section_title": "Rendering Data with Notebooks",
        "section_path": "Contributions > Datasets > Rendering Data > Rendering Data with Notebooks",
        "chunk_index": 1,
        "total_chunks_in_section": 4,
        "start_char": 809,
        "end_char": 2155,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1.3",
        "level": 4,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.774155"
      },
      "char_count": 1346,
      "word_count": 204,
      "embedding": null
    },
    {
      "chunk_id": "093aced60b0fdb560bb5178703726197",
      "content": "Change the structure of theLean.DataSource.<vendorNameDatasetName> / outputdirectory to match the path structure you defined in theGetSourceget_sourcemethods (for example,output / alternative / xyzairline / ticketsales).In theLean.DataSource.<vendorNameDatasetName> / DataProcessing / process.sample.ipynbfile, add some code to time how long it takes to process the entire dataset and how long it takes to update the dataset with one day's worth of data.You need this information for when you provide thedataset documentation. We need to know how long it takes to process your dataset so we can schedule its processing job.In the processing file, load the raw data from your source.You can fetch data from any of the following sources:SourceConsiderationsLocal FilesIt can help to first copy the data into location.Remote APIStay within the rate limits. You can use the rate gate class.You should load and process the data period by period. Use the date range provided to the script to process the specific dates provided.If your dataset is for universe selection data and it's at a higher frequency than hour resolution, resample your data to hourly or daily resolution.If any of the following statements are true, skip the rest of the steps in this tutorial:\n\nYour dataset is not related to Equities.Your dataset is related to Equities and already includes the point-in-time tickers.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.3.3",
        "section_title": "Rendering Data with Notebooks",
        "section_path": "Contributions > Datasets > Rendering Data > Rendering Data with Notebooks",
        "chunk_index": 2,
        "total_chunks_in_section": 4,
        "start_char": 2157,
        "end_char": 3542,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1.3",
        "level": 4,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.774167"
      },
      "char_count": 1385,
      "word_count": 208,
      "embedding": null
    },
    {
      "chunk_id": "7c08c5dd2238bc6f75ed5a7857c0dedf",
      "content": "Your dataset is not related to Equities.Your dataset is related to Equities and already includes the point-in-time tickers.\n\nIf your dataset is related to Equities and your dataset doesn't account for ticker changes, the rest of the steps help you to adjust the tickers over the historical data so they are point-in-time.\n\n$ dotnet build .\\DataProcessing\\DataProcessing.csproj\n\nThis step generates a file that theCLRImportslibrary uses.\n\nfrom CLRImports import *\n\nmap_file_provider = LocalZipMapFileProvider()\nmap_file_provider.Initialize(DefaultDataProvider())\n\nsid = SecurityIdentifier.generate_equity(point_in_time_ticker,\nMarket.USA, True, map_file_provider, csv_date)\n\nAfter you finish editing theprocess.sample.ipynbscript, run its cells to populate theLean.DataSource.<vendorNameDatasetName> / outputdirectory and theoutputdirectory in your machine's root directory.\n\nNote: The pull request you make at the end must contain sample data so we can review it and run the demonstration algorithms.\n\n### Notebook Processor Examples\n\nThe following examples are rendering datasets with Jupyter Notebook processing:\n\nLean.DataSource.KavoutCompositeFactorBundleLean.DataSource.USEnergy",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.3.3",
        "section_title": "Rendering Data with Notebooks",
        "section_path": "Contributions > Datasets > Rendering Data > Rendering Data with Notebooks",
        "chunk_index": 3,
        "total_chunks_in_section": 4,
        "start_char": 3544,
        "end_char": 4727,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1.3",
        "level": 4,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.774178"
      },
      "char_count": 1183,
      "word_count": 137,
      "embedding": null
    },
    {
      "chunk_id": "88064b1428ad84cc42b12ec873f8869b",
      "content": "[Section 2.1.4: Testing Data Models]\n\n### Introduction\n\nThe implementation of your Data Source must be thoroughly tested to be listed on theDataset Market.\n\n### Run Demonstration Algorithms\n\nFollow these steps to test if your demonstration algorithm will run in production with the processed data:",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.4",
        "section_title": "Testing Data Models",
        "section_path": "Contributions > Datasets > Testing Data Models",
        "chunk_index": 0,
        "total_chunks_in_section": 4,
        "start_char": 0,
        "end_char": 297,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.774320"
      },
      "char_count": 297,
      "word_count": 44,
      "embedding": null
    },
    {
      "chunk_id": "528c6113f312b6de9a7e063c74637c12",
      "content": "Follow these steps to test if your demonstration algorithm will run in production with the processed data:\n\nOpen theLean.DataSource.<vendorNameDatasetName> / QuantConnect.DataSource.csprojfile in Visual Studio.In the top menu bar of Visual Studio, clickBuild > Build Solution.The Output panel displays the build status of the project.Close Visual Studio.If you have a local copy of LEAN, pull the latest changes.$ git pull upstream masterIf you don't have a local copy of LEAN,fork the LEAN repositoryand thenclone it.$ git clone https://github.com/<username>/Lean.gitCopy the contents of theLean.DataSource.<vendorNameDatasetName> / outputdirectory and paste them into theLean / Datadirectory.Open theLean / QuantConnect.Lean.slnfile in Visual Studio.In the Solution Explorer panel of Visual Studio, right-clickQuantConnect.Algorithm.CSharpand then clickAdd > Existing Item….In the Add Existing Item window, click theLean.DataSource.<vendorNameDatasetName> / <vendorNameDatasetName>Algorithm.csfile and then clickAdd.In the Solution Explorer panel, right-clickQuantConnect.Algorithm.CSharpand then clickAdd > Project Reference....In the Reference Manager window, clickBrowse….In the Select the files to reference… window, click theLean.DataSource.<vendorNameDatasetName> / bin / Debug / net9.0 / QuantConnect.DataSource.<vendorNameDatasetName>.dllfile and then clickAdd.The Reference Manager window displays theQuantConnect.DataSource.<vendorNameDatasetName>.dllfile with the check box beside it enabled.ClickOK.The Solution Explorer panel adds theQuantConnect.DataSource.<vendorNameDatasetName>.dllfile underQuantConnect.Algorithm.CSharp > Dependencies > Assemblies.In theLean / Algorithm.CSharp / <vendorNameDatasetName>Algorithm.csfile,write an algorithmthat uses your new dataset.In the Solution Explorer panel, clickQuantConnect.Lean.Launcher > config.json.In theconfig.jsonfile, set the following keys:\"algorithm-type-name\": \"<vendorNameDatasetName>Algorithm\",\n\"algorithm-location\": \"QuantConnect.Algorithm.CSharp.dll\",PressCtrl+F5to backtest your demonstration algorithm.Copy theLean.DataSource.<vendorNameDatasetName> / <vendorNameDatasetName>Algorithm.pyfile and paste it inLean / Algorithm.Pythondirectory.In theLean / Algorithm.Python / <vendorNameDatasetName>Algorithm.pyfile,write an algorithmthat uses your new dataset.In the Solution Explorer panel, clickQuantConnect.Lean.Launcher > config.json.In theconfig.jsonfile, set the following keys:\"algorithm-type-name\": \"<vendorNameDatasetName>Algorithm\",\n\"algorithm-location\": \"../../../Algorithm.Python/<vendorNameDatasetName>Algorithm.py\",PressCtrl+F5to backtest your demonstration algorithm.Important: Your backtests must run without error. If your backtests produce errors, correct them and then run the backtest again.Copy theLean / Algorithm.CSharp / <vendorNameDatasetName>Algorithm.csfile toLean.DataSource.<vendorNameDatasetName> / <vendorNameDatasetName>Algorithm.cs.Copy theLean / Algorithm.Python / <vendorNameDatasetName>Algorithm.pyfile toLean.DataSource.<vendorNameDatasetName> / <vendorNameDatasetName>Algorithm.py.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.4",
        "section_title": "Testing Data Models",
        "section_path": "Contributions > Datasets > Testing Data Models",
        "chunk_index": 1,
        "total_chunks_in_section": 4,
        "start_char": 299,
        "end_char": 3392,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.774329"
      },
      "char_count": 3093,
      "word_count": 282,
      "embedding": null
    },
    {
      "chunk_id": "d025159138a27fa2569b26753b23f58c",
      "content": "Open theLean.DataSource.<vendorNameDatasetName> / QuantConnect.DataSource.csprojfile in Visual Studio.In the top menu bar of Visual Studio, clickBuild > Build Solution.The Output panel displays the build status of the project.Close Visual Studio.If you have a local copy of LEAN, pull the latest changes.$ git pull upstream masterIf you don't have a local copy of LEAN,fork the LEAN repositoryand thenclone it.$ git clone https://github.com/<username>/Lean.gitCopy the contents of theLean.DataSource.<vendorNameDatasetName> / outputdirectory and paste them into theLean / Datadirectory.Open theLean / QuantConnect.Lean.slnfile in Visual Studio.In the Solution Explorer panel of Visual Studio, right-clickQuantConnect.Algorithm.CSharpand then clickAdd > Existing Item….In the Add Existing Item window, click theLean.DataSource.<vendorNameDatasetName> / <vendorNameDatasetName>Algorithm.csfile and then clickAdd.In the Solution Explorer panel, right-clickQuantConnect.Algorithm.CSharpand then clickAdd > Project Reference....In the Reference Manager window, clickBrowse….In the Select the files to reference… window, click theLean.DataSource.<vendorNameDatasetName> / bin / Debug / net9.0 / QuantConnect.DataSource.<vendorNameDatasetName>.dllfile and then clickAdd.The Reference Manager window displays theQuantConnect.DataSource.<vendorNameDatasetName>.dllfile with the check box beside it enabled.ClickOK.The Solution Explorer panel adds theQuantConnect.DataSource.<vendorNameDatasetName>.dllfile underQuantConnect.Algorithm.CSharp > Dependencies > Assemblies.In theLean / Algorithm.CSharp / <vendorNameDatasetName>Algorithm.csfile,write an algorithmthat uses your new dataset.In the Solution Explorer panel, clickQuantConnect.Lean.Launcher > config.json.In theconfig.jsonfile, set the following keys:\"algorithm-type-name\": \"<vendorNameDatasetName>Algorithm\",\n\"algorithm-location\": \"QuantConnect.Algorithm.CSharp.dll\",PressCtrl+F5to backtest your demonstration algorithm.Copy theLean.DataSource.<vendorNameDatasetName> / <vendorNameDatasetName>Algorithm.pyfile and paste it inLean / Algorithm.Pythondirectory.In theLean / Algorithm.Python / <vendorNameDatasetName>Algorithm.pyfile,write an algorithmthat uses your new dataset.In the Solution Explorer panel, clickQuantConnect.Lean.Launcher > config.json.In theconfig.jsonfile, set the following keys:\"algorithm-type-name\": \"<vendorNameDatasetName>Algorithm\",\n\"algorithm-location\": \"../../../Algorithm.Python/<vendorNameDatasetName>Algorithm.py\",PressCtrl+F5to backtest your demonstration algorithm.Important: Your backtests must run without error. If your backtests produce errors, correct them and then run the backtest again.Copy theLean / Algorithm.CSharp / <vendorNameDatasetName>Algorithm.csfile toLean.DataSource.<vendorNameDatasetName> / <vendorNameDatasetName>Algorithm.cs.Copy theLean / Algorithm.Python / <vendorNameDatasetName>Algorithm.pyfile toLean.DataSource.<vendorNameDatasetName> / <vendorNameDatasetName>Algorithm.py.\n\n### Run Unit Tests",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.4",
        "section_title": "Testing Data Models",
        "section_path": "Contributions > Datasets > Testing Data Models",
        "chunk_index": 2,
        "total_chunks_in_section": 4,
        "start_char": 3394,
        "end_char": 6399,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.774351"
      },
      "char_count": 3005,
      "word_count": 269,
      "embedding": null
    },
    {
      "chunk_id": "a96efcdf426b5207e521d14b317af174",
      "content": "### Run Unit Tests\n\nYou mustrun your demonstration algorithmswithout error before you set up unit tests.\n\nIn theLean.DataSource.<vendorNameDatasetName> / <vendorNameDatasetName>Tests.csfile, define theCreateNewInstancemethod to return an instance of yourDataSourceclass and then execute the following commands to run the unit tests:\n\n$ dotnet build tests/Tests.csproj\n$ dotnet test tests/bin/Debug/net9.0/Tests.dll",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.4",
        "section_title": "Testing Data Models",
        "section_path": "Contributions > Datasets > Testing Data Models",
        "chunk_index": 3,
        "total_chunks_in_section": 4,
        "start_char": 6401,
        "end_char": 6815,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.774369"
      },
      "char_count": 414,
      "word_count": 47,
      "embedding": null
    },
    {
      "chunk_id": "a5bfd8cb071f9461e46406dd5487e25c",
      "content": "[Section 2.1.5: Data Documentation]\n\n### Introduction\n\nThis page explains how to provide documentation for your dataset so QuantConnect members can use it in their trading algorithms.\n\n### Required Key Properties\n\nYou need to process the entire dataset to collect the following information:\n\n[Table - 8 rows]\n\n### Provide Documentation\n\nTo provide documentation for your dataset, in theLean.DataSource.<vendorNameDatasetName> / listing-about.mdandLean.DataSource.<vendorNameDatasetName> / listing-documentation.mdfiles, fill in the missing content.\n\n### Next Steps\n\nAfter we review and accept your dataset contribution, we will create a page in ourDataset Market. At that point, you will be able to write algorithms in QuantConnect Cloud using your dataset and you can contribute an example algorithm for the dataset listing. After your dataset listing is complete, we'll include your new dataset in ourdownloading data tutorial.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.1.5",
        "section_title": "Data Documentation",
        "section_path": "Contributions > Datasets > Data Documentation",
        "chunk_index": 0,
        "total_chunks_in_section": 1,
        "start_char": 0,
        "end_char": 929,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.1",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.774472"
      },
      "char_count": 929,
      "word_count": 127,
      "embedding": null
    },
    {
      "chunk_id": "d56c45cad34b5463f4b10432d6a5e904",
      "content": "[Section 2.2: Brokerages]\n\nCreating a fully supported brokerage is a challenging endeavor. LEAN requires a number of individual pieces which work together to form a complete brokerage implementation. This guide aims to describe in as much detail as possible what you need to do for each module.The end goal is to submit a pull request that passes all tests. Partially-completed brokerage implementations are acceptable if they are merged to a branch. It's easy to fall behind master, so be sure to keep your branch updated with the master branch. Before you start, read LEAN'scoding style guidelinesto comply with the code commenting and design standards.The root of the brokerage system is the algorithm job packets, which hold configuration information about how to run LEAN. The program logic is a little convoluted. It moves fromconfig.json > create job packet > create brokerage factory matching name > set job packet brokerage data > factory creates brokerage instance. As a result, we'll start creating a brokerage at the root, the configuration and brokerage factory.Setting Up Your EnvironmentSet up your local brokerage repository.Laying the Foundation(IBrokerageFactory) Stub out the implementation and initialize a brokerage instance.Creating the Brokerage(IBrokerage) Instal key brokerage application logic, where possible using a brokerage SDK.Translating Symbol Conventions(ISymbolMapper) Translate brokerage specific tickers to LEAN format for a uniform algorithm design experience.Describing Brokerage Limitations(IBrokerageModel) Describe brokerage support of orders and set transaction models.Enabling Live Data Streaming(IDataQueueHandler) Set up a live streaming data service from a brokerage-supplied source.Enabling Historical Data(IHistoryProvider) Tap into the brokerage historical data API to serve history for live algorithms.Downloading Data(IDataDownloader) Save data from the brokerage to disk in LEAN format.Modeling Fee Structures(IFeeModel) Enable accurate backtesting with specific fee structures of the brokerage.Updating the Algorithm API(ISecurityTransactionModel) Combine the various models together to form a brokerage set.See AlsoDataset MarketPurchasing Datasets",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.2",
        "section_title": "Brokerages",
        "section_path": "Contributions > Brokerages",
        "chunk_index": 0,
        "total_chunks_in_section": 1,
        "start_char": 0,
        "end_char": 2203,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.774623"
      },
      "char_count": 2203,
      "word_count": 296,
      "embedding": null
    },
    {
      "chunk_id": "1f04b75e9d6396f3007d3c1298f81426",
      "content": "[Section 2.2.1: Setting Up Your Environment]\n\n### Introduction\n\nThis page explains how to set up your coding environment to create, develop, and test your brokerage before you contribute it to LEAN.\n\n### Prerequisites\n\nWorking knowledge of C#. You also need toinstall .NET 6.0.\n\n### Set Up Environment\n\nFollow these steps to set up your environment:\n\nForkLeanand then clone your forked repository to your local machine.Open theLean.Brokerages.Template repositoryand clickUse this template.On the Create a new repository from Lean.Brokerages.Template page, set the repository name toLean.Brokerages.<brokerageName>(for example,Lean.Brokerages.XYZ).ClickCreate repository from template.Clone theLean.Brokerages.<brokerageName>repository.$ git clone https://github.com/username/Lean.Brokerages.<brokerageName>.gitIf you're on a Linux terminal, in yourLean.Brokerages.<brokerageName>directory, change the access permissions of the bash script.$ chmod +x ./renameBrokerageIn yourLean.Brokerages.<brokerageName>directory, run therenameBrokerage.shbash script.$ renameBrokerage.shThe bash script replaces some placeholder text in theLean.Brokerages.<brokerageName>directory and renames some files according to your brokerage name.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.2.1",
        "section_title": "Setting Up Your Environment",
        "section_path": "Contributions > Brokerages > Setting Up Your Environment",
        "chunk_index": 0,
        "total_chunks_in_section": 1,
        "start_char": 0,
        "end_char": 1223,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.2",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.774713"
      },
      "char_count": 1223,
      "word_count": 131,
      "embedding": null
    },
    {
      "chunk_id": "25ac3c149004c951ef4c07eec844b2fc",
      "content": "[Section 2.2.2: Laying the Foundation]\n\n[Table - 4 rows]\n\n### Introduction\n\nTheIBrokerageFactorycreates brokerage instances and configures LEAN with aJob Packet. To create the rightBrokerageFactorytype, LEAN uses the brokerage name in the job packet. To set the brokerage name, LEAN uses thelive-mode-brokeragevalue in theconfiguration file.\n\n### Prerequisites\n\nYou need toset up your environmentbefore you can lay the foundation for a new brokerage.\n\n### Lay the Foundation\n\nFollow these steps to stub out the implementation and initialize a brokerage instance:",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.2.2",
        "section_title": "Laying the Foundation",
        "section_path": "Contributions > Brokerages > Laying the Foundation",
        "chunk_index": 0,
        "total_chunks_in_section": 5,
        "start_char": 0,
        "end_char": 562,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.2",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.775035"
      },
      "char_count": 562,
      "word_count": 78,
      "embedding": null
    },
    {
      "chunk_id": "a97971e1193cfb13fd7b0b64af190c69",
      "content": "Follow these steps to stub out the implementation and initialize a brokerage instance:\n\nIn theLean / Launcher / config.jsonfile, add a few key-value pairs with your brokerage configuration information.For example,oanda-access-tokenandoanda-account-idkeys. These key-value pairs will be used for most local debugging and testing as the default. LEAN automatically copies these pairs to theBrokerageDatamember of the job packet as a dictionary of<string,string>pairs.In theLean.Brokerages.<brokerageName> / QuantConnect.<brokerageName>Brokerage / <brokerageName>Factory.csfile, update theBrokerageDatamember so it uses theConfigclass to load all the required configuration settings from theLean / Launcher / config.jsonfile.For instance,Config.Get(\"oanda-access-token\")returns the\"oanda-access-token\"value from the configuration file. For a full example, see theBrokerageData memberin theBitfinexBrokerageFactory.In theIBrokerageFactoryexamples, you'll see code likeComposer.Instance.AddPart<IDataQueueHandler>(dataQueueHandler), which adds parts to theComposer. The Composer is a system in LEAN for dynamically loading types. In this case, it's adding an instance of theDataQueueHandlerfor the brokerage to the composer. You can think of the Composer as a library and adding parts is like adding books to its collection.In theLean / Common / Brokeragesfolder, create a<brokerageName>BrokerageModel.csfile with a stub implementation that inherits from theDefaultBrokerageModel.Brokerage models tell LEAN what order types a brokerage supports, whether we're allowed to update an order, and whatreality modelsto use. Use the following stub implementation for now:namespace QuantConnect.Brokerages\n{\npublic class BrokerageNameBrokerageModel : DefaultBrokerageModel\n{",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.2.2",
        "section_title": "Laying the Foundation",
        "section_path": "Contributions > Brokerages > Laying the Foundation",
        "chunk_index": 1,
        "total_chunks_in_section": 5,
        "start_char": 564,
        "end_char": 2325,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.2",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.775044"
      },
      "char_count": 1761,
      "word_count": 202,
      "embedding": null
    },
    {
      "chunk_id": "2defe538c790448520aea64448ce21d9",
      "content": "In theLean / Launcher / config.jsonfile, add a few key-value pairs with your brokerage configuration information.For example,oanda-access-tokenandoanda-account-idkeys. These key-value pairs will be used for most local debugging and testing as the default. LEAN automatically copies these pairs to theBrokerageDatamember of the job packet as a dictionary of<string,string>pairs.In theLean.Brokerages.<brokerageName> / QuantConnect.<brokerageName>Brokerage / <brokerageName>Factory.csfile, update theBrokerageDatamember so it uses theConfigclass to load all the required configuration settings from theLean / Launcher / config.jsonfile.For instance,Config.Get(\"oanda-access-token\")returns the\"oanda-access-token\"value from the configuration file. For a full example, see theBrokerageData memberin theBitfinexBrokerageFactory.In theIBrokerageFactoryexamples, you'll see code likeComposer.Instance.AddPart<IDataQueueHandler>(dataQueueHandler), which adds parts to theComposer. The Composer is a system in LEAN for dynamically loading types. In this case, it's adding an instance of theDataQueueHandlerfor the brokerage to the composer. You can think of the Composer as a library and adding parts is like adding books to its collection.In theLean / Common / Brokeragesfolder, create a<brokerageName>BrokerageModel.csfile with a stub implementation that inherits from theDefaultBrokerageModel.Brokerage models tell LEAN what order types a brokerage supports, whether we're allowed to update an order, and whatreality modelsto use. Use the following stub implementation for now:namespace QuantConnect.Brokerages\n{\npublic class BrokerageNameBrokerageModel : DefaultBrokerageModel\n{\n\n}\n}whereBrokerageNameis the name of your brokerage. For example, if the brokerage name is XYZ, thenBrokerageNameBrokerageModelshould beXYZBrokerageModel. You'll extend this implementation later.In theLean.Brokerages.<BrokerageName> / QuantConnect.<brokerageName>Brokerage / <brokerageName>BrokerageFactory.csfile, defineGetBrokerageModelto return an instance of your new brokerage model.public override IBrokerageModel GetBrokerageModel(IOrderProvider orderProvider)\n{\nreturn new BrokerageNameBrokerageModel();\n}If your brokerage uses websockets to send data, in theLean.Brokerages.<brokerageName> / QuantConnect.<brokerageName> / <brokerageName>Brokerage.csfile, replace theBrokeragebase class forBaseWebsocketsBrokerage.In theLean.Brokerages.<brokerageName> / QuantConnect.<brokerageName>Brokerage / <brokerageName>Brokerage.csfile, update the constructor to save required authentication data to private variables.In theLean.Brokerages.<brokerageName> / QuantConnect.<brokerageName>Brokerage / <brokerageName>BrokerageFactory.csfile, define theCreateBrokeragemethod to create and return an instance of your new brokerage model without connecting to the brokerage.The Brokerage Factory uses a job packet to create an initialized brokerage instance in theCreateBrokeragemethod. Assume thejobargument has the best source of data, not theBrokerageDataproperty. TheBrokerageDataproperty in the factory are the starting default values from the configuration file, which can be overridden by a runtime job.In theLean / Launcher / config.jsonfile, add alive-<brokerageName>key.Theselive-<brokerageName>keys group configuration flags together and override the root configuration values. Use the following key-value pair as a starting point:// defines the 'live-brokerage-name' environment\n\"live-brokerage-name\": {\n\"live-mode\": true,",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.2.2",
        "section_title": "Laying the Foundation",
        "section_path": "Contributions > Brokerages > Laying the Foundation",
        "chunk_index": 2,
        "total_chunks_in_section": 5,
        "start_char": 2327,
        "end_char": 5827,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.2",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.775057"
      },
      "char_count": 3500,
      "word_count": 369,
      "embedding": null
    },
    {
      "chunk_id": "55ab0adb2b2f23492b753a9bf3d7744c",
      "content": "}\n}whereBrokerageNameis the name of your brokerage. For example, if the brokerage name is XYZ, thenBrokerageNameBrokerageModelshould beXYZBrokerageModel. You'll extend this implementation later.In theLean.Brokerages.<BrokerageName> / QuantConnect.<brokerageName>Brokerage / <brokerageName>BrokerageFactory.csfile, defineGetBrokerageModelto return an instance of your new brokerage model.public override IBrokerageModel GetBrokerageModel(IOrderProvider orderProvider)\n{\nreturn new BrokerageNameBrokerageModel();\n}If your brokerage uses websockets to send data, in theLean.Brokerages.<brokerageName> / QuantConnect.<brokerageName> / <brokerageName>Brokerage.csfile, replace theBrokeragebase class forBaseWebsocketsBrokerage.In theLean.Brokerages.<brokerageName> / QuantConnect.<brokerageName>Brokerage / <brokerageName>Brokerage.csfile, update the constructor to save required authentication data to private variables.In theLean.Brokerages.<brokerageName> / QuantConnect.<brokerageName>Brokerage / <brokerageName>BrokerageFactory.csfile, define theCreateBrokeragemethod to create and return an instance of your new brokerage model without connecting to the brokerage.The Brokerage Factory uses a job packet to create an initialized brokerage instance in theCreateBrokeragemethod. Assume thejobargument has the best source of data, not theBrokerageDataproperty. TheBrokerageDataproperty in the factory are the starting default values from the configuration file, which can be overridden by a runtime job.In theLean / Launcher / config.jsonfile, add alive-<brokerageName>key.Theselive-<brokerageName>keys group configuration flags together and override the root configuration values. Use the following key-value pair as a starting point:// defines the 'live-brokerage-name' environment\n\"live-brokerage-name\": {\n\"live-mode\": true,\n\n\"live-mode-brokerage\": \"BrokerageName\",",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.2.2",
        "section_title": "Laying the Foundation",
        "section_path": "Contributions > Brokerages > Laying the Foundation",
        "chunk_index": 3,
        "total_chunks_in_section": 5,
        "start_char": 5829,
        "end_char": 7695,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.2",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.775076"
      },
      "char_count": 1866,
      "word_count": 182,
      "embedding": null
    },
    {
      "chunk_id": "e6ee3365688e94634aaea82025111664",
      "content": "\"live-mode-brokerage\": \"BrokerageName\",\n\n\"setup-handler\": \"QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler\",\n\"result-handler\": \"QuantConnect.Lean.Engine.Results.LiveTradingResultHandler\",\n\"data-feed-handler\": \"QuantConnect.Lean.Engine.DataFeeds.LiveTradingDataFeed\",\n\"data-queue-handler\": [ \"QuantConnect.Lean.Engine.DataFeeds.Queues.LiveDataQueue\" ],\n\"real-time-handler\": \"QuantConnect.Lean.Engine.RealTime.LiveTradingRealTimeHandler\",\n\"transaction-handler\": \"QuantConnect.Lean.Engine.TransactionHandlers.BacktestingTransactionHandler\"\n},wherebrokerage-nameand\"BrokerageName\"are placeholders for your brokerage name.In theLean / Launcher / config.jsonfile, set theenvironmentvalue to the your new brokerage environment.For example,\"live-brokerage-name\".Build the solution.Running the solution won't work, but the stub implementation should still build.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.2.2",
        "section_title": "Laying the Foundation",
        "section_path": "Contributions > Brokerages > Laying the Foundation",
        "chunk_index": 4,
        "total_chunks_in_section": 5,
        "start_char": 7697,
        "end_char": 8555,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.2",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.775090"
      },
      "char_count": 858,
      "word_count": 49,
      "embedding": null
    },
    {
      "chunk_id": "b35cb9c5dc6ef87077a233ab69a73495",
      "content": "[Section 2.2.3: Creating the Brokerage]\n\n[Table - 4 rows]\n\n### Introduction\n\nTheIBrokerageholds the bulk of the core logic responsible for running the brokerage implementation. Many smaller models described later internally use the brokerage implementation, so its best to now start implementating theIBrokerage. Brokerage classes can get quite large, so use apartialclass modifier to break up the files in appropriate categories.\n\n### Prerequisites\n\nYou need tolay the foundationbefore you can create a new brokerage.\n\n### Brokerage Roles\n\nThe brokerage has many the following important roles vital for the stability of a running algorithm:\n\nMaintain Connection - Connect and maintain connection while algorithm running.Setup State - Initialize the algorithm portfolio, open orders and cashbook.Order Operations - Create, update and cancel orders.Order Events - Receive order fills and apply them to portfolio.Account Events - Track non-order events (cash deposits/removals).Brokerage Events - Interpret brokerage messages and act when required.Serve History Requests - Provide historical data on request.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.2.3",
        "section_title": "Creating the Brokerage",
        "section_path": "Contributions > Brokerages > Creating the Brokerage",
        "chunk_index": 0,
        "total_chunks_in_section": 11,
        "start_char": 0,
        "end_char": 1106,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.2",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.776233"
      },
      "char_count": 1106,
      "word_count": 153,
      "embedding": null
    },
    {
      "chunk_id": "59c943095f94a6500aaa7408807e32ee",
      "content": "Maintain Connection - Connect and maintain connection while algorithm running.Setup State - Initialize the algorithm portfolio, open orders and cashbook.Order Operations - Create, update and cancel orders.Order Events - Receive order fills and apply them to portfolio.Account Events - Track non-order events (cash deposits/removals).Brokerage Events - Interpret brokerage messages and act when required.Serve History Requests - Provide historical data on request.\n\nBrokerages often have their own ticker styles, order class names, and event names. Many of the methods in the brokerage implementation may simply be converting from the brokerage object format into LEAN format. You should plan accordingly to write neat code.\n\nThe brokerage must implement the following interfaces:\n\nclass MyBrokerage : Brokerage, IDataQueueHandler, IDataQueueUniverseProvider { ... }\n\n### Implementation Style",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.2.3",
        "section_title": "Creating the Brokerage",
        "section_path": "Contributions > Brokerages > Creating the Brokerage",
        "chunk_index": 1,
        "total_chunks_in_section": 11,
        "start_char": 1108,
        "end_char": 1999,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.2",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.776246"
      },
      "char_count": 891,
      "word_count": 121,
      "embedding": null
    },
    {
      "chunk_id": "7399592c55fd26a179cef2357972d439",
      "content": "### Implementation Style\n\nThis guide focuses on implementing the brokerage step-by-step in LEAN because it's a more natural workflow for most people. You can also follow a more test-driven development process by following the test harness. To do this, create a new test class that extends from the base class inLean / Tests / Brokerages / BrokerageTests.cs. This test-framework tests all the methods for anIBrokerageimplementation.\n\n### Connection Requirements\n\nLEAN is best used with streaming or socket-based brokerage connections. Streaming brokerage implementations allow for the easiest translation of broker events into LEAN events. Without streaming order events, you will need to poll for to check for fills. In our experience, this is fraught with additional risks and challenges.\n\n### SDK Libraries",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.2.3",
        "section_title": "Creating the Brokerage",
        "section_path": "Contributions > Brokerages > Creating the Brokerage",
        "chunk_index": 2,
        "total_chunks_in_section": 11,
        "start_char": 2001,
        "end_char": 2809,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.2",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.776255"
      },
      "char_count": 808,
      "word_count": 120,
      "embedding": null
    },
    {
      "chunk_id": "0ef3910ed2b68fc83f90344c0ceab8bd",
      "content": "### SDK Libraries\n\nMost brokerages provide a wrapper for their API. If it has a permissive license and it's compatible with .NET 6, you should utilize it. Although it is technically possible to embed an external github repository, we've elected to not do this to make LEAN easier to install (submodules can be tricky for beginners). Instead, copy the library into its own subfolder of the brokerage implementation. For example,Lean.Brokerages.<brokerageName> / QuantConnect.<brokerageName>Brokerage / BrokerLib / *. After you add a library, build the project again to make sure the library successfully compiles.\n\nLEANOpen-Source. If you copy and paste code from an external source, leave the comments and headers intact. If they don't have a comment header, add one to each file, referencing the source. Let's keep the attributions in place.\n\n### Define the Brokerage Class\n\nThe following sections describe components of the brokerage implementation in theLean.Brokerages.<brokerageName> / QuantConnect.<brokerageName>Brokerage / <brokerageName>Brokerage.csfile.\n\nBase Class",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.2.3",
        "section_title": "Creating the Brokerage",
        "section_path": "Contributions > Brokerages > Creating the Brokerage",
        "chunk_index": 3,
        "total_chunks_in_section": 11,
        "start_char": 2811,
        "end_char": 3886,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.2",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.776264"
      },
      "char_count": 1075,
      "word_count": 152,
      "embedding": null
    },
    {
      "chunk_id": "7b4c3bf4f15f082e66c9ef903c48e541",
      "content": "Base Class\n\nUsing a base class is optional but allows you to reuse event methods we have provided. TheBrokerageobject implements these event handlers and marks the remaining items asabstract.\n\nLEAN provides an optional base classBaseWebsocketsBrokeragewhich seeks to connect and maintain a socket connection and pass messages to an event handler. As each socket connection is different, carefully consider before using this class. It might be easier and more maintainable to simply maintain your own socket connection.\n\nBrush up on thepartialclass keyword. It will help you break-up your class later.\n\nClass Constructor\n\nOnce the scaffolding brokerage methods are in place (overrides of the abstract base classes), you can focus on the class constructor. If you are using a brokerage SDK, create a new instance of their library and store it to a class variable for later use. You should define the constructor so that it accepts all the arguments you pass it during theCreateBrokeragemethod you implemented in theLean.Brokerages.<brokerageName> / QuantConnect.<brokerageName>Brokerage / <brokerageName>BrokerageFactory.csfile.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.2.3",
        "section_title": "Creating the Brokerage",
        "section_path": "Contributions > Brokerages > Creating the Brokerage",
        "chunk_index": 4,
        "total_chunks_in_section": 11,
        "start_char": 3888,
        "end_char": 5014,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.2",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.776274"
      },
      "char_count": 1126,
      "word_count": 161,
      "embedding": null
    },
    {
      "chunk_id": "64a4bfc932508fa1f38fff4ffcce1710",
      "content": "Once the scaffolding brokerage methods are in place (overrides of the abstract base classes), you can focus on the class constructor. If you are using a brokerage SDK, create a new instance of their library and store it to a class variable for later use. You should define the constructor so that it accepts all the arguments you pass it during theCreateBrokeragemethod you implemented in theLean.Brokerages.<brokerageName> / QuantConnect.<brokerageName>Brokerage / <brokerageName>BrokerageFactory.csfile.\n\nThe following table provides some example implementations of the brokerage class constructor:\n\n[Table - 3 rows]\n\nstring Name\n\nTheNamenameproperty is a human-readable brokerage name for debugging and logging. For US Equity-regulated brokerages, convention states this name generally ends in the word \"Brokerage\".\n\nvoid Connect()\n\nTheConnectmethod triggers logic for establishing a link to your brokerage. Normally, we don't do this in the constructor because it makes algorithms and brokerages die in theBrokerageFactoryprocess. For most brokerages, to establish a connection with the brokerage, call the connect method on your SDK library.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.2.3",
        "section_title": "Creating the Brokerage",
        "section_path": "Contributions > Brokerages > Creating the Brokerage",
        "chunk_index": 5,
        "total_chunks_in_section": 11,
        "start_char": 5016,
        "end_char": 6162,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.2",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.776284"
      },
      "char_count": 1146,
      "word_count": 159,
      "embedding": null
    },
    {
      "chunk_id": "8a5fcb2132591ef97c06e12a9c96b207",
      "content": "TheConnectmethod triggers logic for establishing a link to your brokerage. Normally, we don't do this in the constructor because it makes algorithms and brokerages die in theBrokerageFactoryprocess. For most brokerages, to establish a connection with the brokerage, call the connect method on your SDK library.\n\nThe following table provides some example implementations of theConnectmethod:\n\n[Table - 3 rows]\n\nIf a soft failure occurs like a lost internet connection or a server 502 error, create a newBrokerageMessageEventso you allow the algorithm tohandle the brokerage messages. For example, Interactive Brokers resets socket connections at different times globally, so users in other parts of the world can get disconnected at strange times of the day. Knowing this, they may elect to have their algorithm ignore specific disconnection attempts.\n\nIf a hard failure occurs like an incorrect password or an unsupported API method, throw a real exception with details of the error.\n\nvoid Disconnect()\n\nTheDisconnectmethod is called at the end of the algorithm before LEAN shuts down.\n\nbool IsConnected",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.2.3",
        "section_title": "Creating the Brokerage",
        "section_path": "Contributions > Brokerages > Creating the Brokerage",
        "chunk_index": 6,
        "total_chunks_in_section": 11,
        "start_char": 6164,
        "end_char": 7267,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.2",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.776294"
      },
      "char_count": 1103,
      "word_count": 165,
      "embedding": null
    },
    {
      "chunk_id": "6b4505a6a55541ffab931fb2ebb89955",
      "content": "bool IsConnected\n\nTheIsConnectedproperty is a boolean that indicates the state of the brokerage connection. Depending on your connection style, this may be automatically handled for you and simply require passing back the value from your SDK. Alternatively, you may need to maintain your own connection state flag in your brokerage class.\n\nbool PlaceOrder(Order order)\n\nThePlaceOrdermethod should send a new LEAN order to the brokerage and report back the success or failure. ThePlaceOrdermethod accepts a genericOrderobject, which is the base class for all order types. The first step of placing an order is often to convert it from LEAN format into the format that the brokerage SDK requires. Your brokerage implementation should aim to support as manyLEAN order typesas possible. There may be other order types in the brokerage, but implementing them is considered out of scope of a rev-0 brokerage implementation.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.2.3",
        "section_title": "Creating the Brokerage",
        "section_path": "Contributions > Brokerages > Creating the Brokerage",
        "chunk_index": 7,
        "total_chunks_in_section": 11,
        "start_char": 7269,
        "end_char": 8186,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.2",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.776304"
      },
      "char_count": 917,
      "word_count": 141,
      "embedding": null
    },
    {
      "chunk_id": "bdfda22f0227ee23a23f8411bf043165",
      "content": "ThePlaceOrdermethod should send a new LEAN order to the brokerage and report back the success or failure. ThePlaceOrdermethod accepts a genericOrderobject, which is the base class for all order types. The first step of placing an order is often to convert it from LEAN format into the format that the brokerage SDK requires. Your brokerage implementation should aim to support as manyLEAN order typesas possible. There may be other order types in the brokerage, but implementing them is considered out of scope of a rev-0 brokerage implementation.\n\nConverting order types is an error-prone process and you should carefully review each order after you've ported it. Some brokerages have many properties on their orders, so check each required property for each order. To simplify the process, define an internalBrokerOrder ConvertOrder(Order order)method to convert orders between LEAN format and your brokerage format. Part of the order conversion might be converting the brokerage ticker (for example, LEAN name \"EURUSD\" vs OANDA name \"EUR/USD\"). This is done with aBrokerageSymbolMapperclass. You can add this functionality later. For now, pass a request for the brokerage ticker to the stub implementation.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.2.3",
        "section_title": "Creating the Brokerage",
        "section_path": "Contributions > Brokerages > Creating the Brokerage",
        "chunk_index": 8,
        "total_chunks_in_section": 11,
        "start_char": 8188,
        "end_char": 9397,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.2",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.776314"
      },
      "char_count": 1209,
      "word_count": 184,
      "embedding": null
    },
    {
      "chunk_id": "f00a0c8adf730641ecf0e9c72fca1410",
      "content": "Converting order types is an error-prone process and you should carefully review each order after you've ported it. Some brokerages have many properties on their orders, so check each required property for each order. To simplify the process, define an internalBrokerOrder ConvertOrder(Order order)method to convert orders between LEAN format and your brokerage format. Part of the order conversion might be converting the brokerage ticker (for example, LEAN name \"EURUSD\" vs OANDA name \"EUR/USD\"). This is done with aBrokerageSymbolMapperclass. You can add this functionality later. For now, pass a request for the brokerage ticker to the stub implementation.\n\nOnce the order type is converted, use theIsConnectedproperty to check if you're connected before placing the order. If you're not connected, throw an exception to halt the algorithm. Otherwise, send the order to your brokerage submit API. Oftentimes, you receive an immediate reply indicating the order was successfully placed. ThePlaceOrdermethod should return true when the order is accepted by the brokerage. If the order is invalid, immediately rejected, or there is an internet outage, the method should return false.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.2.3",
        "section_title": "Creating the Brokerage",
        "section_path": "Contributions > Brokerages > Creating the Brokerage",
        "chunk_index": 9,
        "total_chunks_in_section": 11,
        "start_char": 9399,
        "end_char": 10583,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.2",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.776325"
      },
      "char_count": 1184,
      "word_count": 176,
      "embedding": null
    },
    {
      "chunk_id": "8c13e5276d0071d8efe9081092719734",
      "content": "Once the order type is converted, use theIsConnectedproperty to check if you're connected before placing the order. If you're not connected, throw an exception to halt the algorithm. Otherwise, send the order to your brokerage submit API. Oftentimes, you receive an immediate reply indicating the order was successfully placed. ThePlaceOrdermethod should return true when the order is accepted by the brokerage. If the order is invalid, immediately rejected, or there is an internet outage, the method should return false.\n\nbool UpdateOrder(Order order)\n\nTheUpdateOrdermethod transmits an update request to the API and returns true if it was successfully processed. Updating an order is one of the most tricky parts of brokerage implementations. You can easily run into synchronization issues.\n\nThe following table provides some example implementations of theUpdateOrdermethod:\n\n[Table - 3 rows]\n\nbool CancelOrder(Order order)\n\nbool UpdateOrder(Order order)\n\nList<Order> GetOpenOrders()\n\nList<Holding> GetAccountHoldings()\n\nList<Cash> GetCashBalance()\n\nbool AccountInstantlyUpdated\n\nIEnumerable<BaseData> GetHistory(HistoryRequest request)\n\nbool AccountInstantlyUpdated",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.2.3",
        "section_title": "Creating the Brokerage",
        "section_path": "Contributions > Brokerages > Creating the Brokerage",
        "chunk_index": 10,
        "total_chunks_in_section": 11,
        "start_char": 10585,
        "end_char": 11754,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.2",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.776336"
      },
      "char_count": 1169,
      "word_count": 150,
      "embedding": null
    },
    {
      "chunk_id": "a98892e8b2af536d32ba0ce332ce96a8",
      "content": "[Section 2.2.4: Translating Symbol Conventions]\n\n### Introduction\n\nThis brokerage development guide is still under construction.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.2.4",
        "section_title": "Translating Symbol Conventions",
        "section_path": "Contributions > Brokerages > Translating Symbol Conventions",
        "chunk_index": 0,
        "total_chunks_in_section": 1,
        "start_char": 0,
        "end_char": 128,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.2",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.776373"
      },
      "char_count": 128,
      "word_count": 15,
      "embedding": null
    },
    {
      "chunk_id": "fe65d0890bce8064979ae04ecfb37958",
      "content": "[Section 2.2.5: Describing Brokerage Limitations]\n\n### Introduction\n\nThis brokerage development guide is still under construction.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.2.5",
        "section_title": "Describing Brokerage Limitations",
        "section_path": "Contributions > Brokerages > Describing Brokerage Limitations",
        "chunk_index": 0,
        "total_chunks_in_section": 1,
        "start_char": 0,
        "end_char": 130,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.2",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.776398"
      },
      "char_count": 130,
      "word_count": 15,
      "embedding": null
    },
    {
      "chunk_id": "45a54981ab47f5bc65e38b3df28f24df",
      "content": "[Section 2.2.6: Enabling Live Data Streaming]\n\n### Introduction\n\nThis brokerage development guide is still under construction.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.2.6",
        "section_title": "Enabling Live Data Streaming",
        "section_path": "Contributions > Brokerages > Enabling Live Data Streaming",
        "chunk_index": 0,
        "total_chunks_in_section": 1,
        "start_char": 0,
        "end_char": 126,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.2",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.776421"
      },
      "char_count": 126,
      "word_count": 16,
      "embedding": null
    },
    {
      "chunk_id": "5f611feff2be5302b42931067a5d888f",
      "content": "[Section 2.2.7: Enabling Historical Data]\n\n### Introduction\n\nThis brokerage development guide is still under construction.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.2.7",
        "section_title": "Enabling Historical Data",
        "section_path": "Contributions > Brokerages > Enabling Historical Data",
        "chunk_index": 0,
        "total_chunks_in_section": 1,
        "start_char": 0,
        "end_char": 122,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.2",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.776443"
      },
      "char_count": 122,
      "word_count": 15,
      "embedding": null
    },
    {
      "chunk_id": "f31f4f0798d54c672ba2a559fc68ffe0",
      "content": "[Section 2.2.8: Downloading Data]\n\n### Introduction\n\nThis brokerage development guide is still under construction.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.2.8",
        "section_title": "Downloading Data",
        "section_path": "Contributions > Brokerages > Downloading Data",
        "chunk_index": 0,
        "total_chunks_in_section": 1,
        "start_char": 0,
        "end_char": 114,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.2",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.776465"
      },
      "char_count": 114,
      "word_count": 14,
      "embedding": null
    },
    {
      "chunk_id": "108767dc5472fb7951efc9667dc19fcd",
      "content": "[Section 2.2.9: Modeling Fee Structures]\n\n### Introduction\n\nThis brokerage development guide is still under construction.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.2.9",
        "section_title": "Modeling Fee Structures",
        "section_path": "Contributions > Brokerages > Modeling Fee Structures",
        "chunk_index": 0,
        "total_chunks_in_section": 1,
        "start_char": 0,
        "end_char": 121,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.2",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.776487"
      },
      "char_count": 121,
      "word_count": 15,
      "embedding": null
    },
    {
      "chunk_id": "4f48a6069f6dc9ca95be990590b356aa",
      "content": "[Section 2.2.10: Updating the Algorithm API]\n\n### Introduction\n\nThis brokerage development guide is still under construction.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.2.10",
        "section_title": "Updating the Algorithm API",
        "section_path": "Contributions > Brokerages > Updating the Algorithm API",
        "chunk_index": 0,
        "total_chunks_in_section": 1,
        "start_char": 0,
        "end_char": 125,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2.2",
        "level": 3,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.776508"
      },
      "char_count": 125,
      "word_count": 16,
      "embedding": null
    },
    {
      "chunk_id": "9636098f92ec22a1ead0518b3ff904f6",
      "content": "[Section 2.3: Indicators]\n\n### Introduction\n\nLEAN currently supports over 100indicators.\nThis page explains how to contribute a new indicator to the open-source project by making a pull request to Lean.\nBefore you get started, familiarize yourself with ourcontributing guidelines.\nIf you don't already have a new indicator in mind that you want to contribute, seethe GitHub Issues in the Lean repositoryfor a list of indicators that community members have requested.\n\n### Get Third-Party Values\n\nAs a quantitative algorithmic trading engine, accuracy and reliability are very important to LEAN.\nWhen you submit a new indicator to the LEAN, you must include third-party source values are required as reference points in your pull request to contrast the values output by your indicator implementation.\nThis requirement validates that your indicator implementation is correct.\nThe following sections explain some examples of acceptable third-party sources.\n\nRenowned Open-source Projects",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.3",
        "section_title": "Indicators",
        "section_path": "Contributions > Indicators",
        "chunk_index": 0,
        "total_chunks_in_section": 17,
        "start_char": 0,
        "end_char": 985,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.778390"
      },
      "char_count": 985,
      "word_count": 143,
      "embedding": null
    },
    {
      "chunk_id": "60691fbdaef42f38ae5ec6bdc55d7c40",
      "content": "Renowned Open-source Projects\n\nDeveloped and maintained by expert teams, these sources undergo rigorous testing and optimization, ensuring accurate calculations.\nThe transparent nature of open-source projects allows for community scrutiny, resulting in bug fixes and continuous improvements.\nOpen-source projects provide thorough information on how the indicator values are calculated, which provides excellent reproducibility.\nThus, we accept values from these projects with high confidence.\nExample projects includeTA-LibandQuantLib.\n\nHighly Credible Websites\n\nSimilar reasons apply to these websites as well.\nThe site should be either the original source or a very popular trading data provider, such that we have confidence in their accuracy and reliability.\nThese sources might provide structured data samples, like aJSONresponse,CSV/Excel file, or scripts for calculating the indicator values.\n\n### Define the Class",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.3",
        "section_title": "Indicators",
        "section_path": "Contributions > Indicators",
        "chunk_index": 1,
        "total_chunks_in_section": 17,
        "start_char": 987,
        "end_char": 1908,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.778428"
      },
      "char_count": 921,
      "word_count": 122,
      "embedding": null
    },
    {
      "chunk_id": "1f24ec4af7f4fa015742006d014a37f1",
      "content": "### Define the Class\n\nTo add a new indicator to Lean, add a class file to theLean / Indicatorsdirectory.\nIndicators are classified as either a data point, bar, orTradeBarindicator.\nTheir classification depends on the class they inherit and the type of data they receive.\nThe following sections explain how to implement each type.\nRegardless of the indicator type, the class must define the following properties:\n\n[Table - 2 rows]\n\nThe class must also define aComputeNextValuemethod, which accepts some data and returns the indicator value.\nAs shown in the following sections, the data/arguments that this method receives depends on the indicator type.\n\nOn rare occassions, some indicators can produce invalid values.\nFor example, a moving average can produce unexpected values due to extreme quotes.\nIn cases like these, override theValidateAndComputeNextValuemethod to return anIndicatorResultwith anIndicatorStatusenumeration.\nIf theIndicatorStatusstates the value is invalid, it won't be passed to the main algorithm.\nTheIndicatorStatusenumeration has the following members:",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.3",
        "section_title": "Indicators",
        "section_path": "Contributions > Indicators",
        "chunk_index": 2,
        "total_chunks_in_section": 17,
        "start_char": 1910,
        "end_char": 2987,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.778444"
      },
      "char_count": 1077,
      "word_count": 152,
      "embedding": null
    },
    {
      "chunk_id": "9ec37aed66c612ccbb2325810851dc97",
      "content": "On rare occassions, some indicators can produce invalid values.\nFor example, a moving average can produce unexpected values due to extreme quotes.\nIn cases like these, override theValidateAndComputeNextValuemethod to return anIndicatorResultwith anIndicatorStatusenumeration.\nIf theIndicatorStatusstates the value is invalid, it won't be passed to the main algorithm.\nTheIndicatorStatusenumeration has the following members:\n\nTo enable the algorithm to warm up the indicator with theWarmUpIndicatormethod, inherit theIIndicatorWarmUpPeriodProviderinterface.\n\nIf your indicator requires a moving average, see theExtra Steps for Moving Averages Typesas you complete the following tutorial.\n\nData Point Indicators\n\nData point indicators useIndicatorDataPointobjects to compute their value.\nThese types of indicators can inherit theIndicatorBase<IndicatorDataPoint>orWindowIndicator<IndicatorDataPoint>class.\nTheWindowIndicator<IndicatorDataPoint>class has several members to help you compute indicator values over multiple periods.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.3",
        "section_title": "Indicators",
        "section_path": "Contributions > Indicators",
        "chunk_index": 3,
        "total_chunks_in_section": 17,
        "start_char": 2989,
        "end_char": 4017,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.778460"
      },
      "char_count": 1028,
      "word_count": 114,
      "embedding": null
    },
    {
      "chunk_id": "0c33075b8fe08f7d4bb17b32177a5aa7",
      "content": "Data point indicators useIndicatorDataPointobjects to compute their value.\nThese types of indicators can inherit theIndicatorBase<IndicatorDataPoint>orWindowIndicator<IndicatorDataPoint>class.\nTheWindowIndicator<IndicatorDataPoint>class has several members to help you compute indicator values over multiple periods.\n\npublic class CustomPointIndicator : IndicatorBase<IndicatorDataPoint>, IIndicatorWarmUpPeriodProvider\n{\npublic int WarmUpPeriod = 2;\npublic override bool IsReady => Samples >= WarmUpPeriod;\n\nprotected override decimal ComputeNextValue(IndicatorDataPoint input)\n{\nreturn 1m;\n}\n\nprotected virtual IndicatorResult ValidateAndComputeNextValue(IndicatorDataPoint input)\n{\nvar indicatorValue = ComputeNextValue(input);\nreturn IsReady ?\nnew IndicatorResult(indicatorValue) :\nnew IndicatorResult(indicatorValue, IndicatorStatus.ValueNotReady);\n}\n}\n\nTo view some example data point indicators that inherit theIndicatorBase<IndicatorDataPoint>class, see the implementation of the following indicators in the LEAN repository:\n\nSharpeRatioDetrendedPriceOscillatorHullMovingAverage",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.3",
        "section_title": "Indicators",
        "section_path": "Contributions > Indicators",
        "chunk_index": 4,
        "total_chunks_in_section": 17,
        "start_char": 4019,
        "end_char": 5105,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.778469"
      },
      "char_count": 1086,
      "word_count": 100,
      "embedding": null
    },
    {
      "chunk_id": "75dd6535784aa23105840f6cba3d25ad",
      "content": "SharpeRatioDetrendedPriceOscillatorHullMovingAverage\n\npublic class CustomWindowIndicator : WindowIndicator<IndicatorDataPoint>\n{\npublic int WarmUpPeriod => base.WarmUpPeriod;\npublic override bool IsReady => base.IsReady;\n\nprotected override decimal ComputeNextValue(IReadOnlyWindow<T> window, IndicatorDataPoint input)\n{\nreturn window.Average();\n}\n\nprotected virtual IndicatorResult ValidateAndComputeNextValue(IndicatorDataPoint input)\n{\nvar indicatorValue = ComputeNextValue(input);\nreturn IsReady ?\nnew IndicatorResult(indicatorValue) :\nnew IndicatorResult(indicatorValue, IndicatorStatus.InvalidInput);\n}\n}\n\nTo view some example data point indicators that inherit theWindowIndicator<IndicatorDataPoint>class, see the implementation of the following indicators in the LEAN repository:\n\nSimpleMovingAverageMomentumMaximum\n\nBar Indicators\n\nBar indicators useQuoteBarorTradeBarobjects to compute their value. Since Forex and CFD securities don't haveTradeBardata, they use bar indicators. Candlestick patterns are examples of bar indicators.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.3",
        "section_title": "Indicators",
        "section_path": "Contributions > Indicators",
        "chunk_index": 5,
        "total_chunks_in_section": 17,
        "start_char": 5107,
        "end_char": 6148,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.778479"
      },
      "char_count": 1041,
      "word_count": 99,
      "embedding": null
    },
    {
      "chunk_id": "9ca017bb9998e9a332403a852f772a83",
      "content": "Bar indicators useQuoteBarorTradeBarobjects to compute their value. Since Forex and CFD securities don't haveTradeBardata, they use bar indicators. Candlestick patterns are examples of bar indicators.\n\npublic class CustomBarIndicator : BarIndicator, IIndicatorWarmUpPeriodProvider\n{\npublic int WarmUpPeriod = 2;\npublic override bool IsReady => Samples >= WarmUpPeriod;\n\nprotected override decimal ComputeNextValue(IBaseDataBar input)\n{\nreturn 1m;\n}\n\nprotected virtual IndicatorResult ValidateAndComputeNextValue(IBaseDataBar input)\n{\nvar indicatorValue = ComputeNextValue(input);\nreturn IsReady ?\nnew IndicatorResult(indicatorValue) :\nnew IndicatorResult(indicatorValue, IndicatorStatus.ValueNotReady);\n}\n}\n\nTo view some example bar indicators, see the implementation of the following indicators in the LEAN repository:\n\nWilliamsPercentRAverageTrueRangeStochastics\n\nTradeBar Indicators\n\nTradeBarindicators useTradeBarobjects to compute their value. SomeTradeBarindicators use the volume property of theTradeBarto compute their value.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.3",
        "section_title": "Indicators",
        "section_path": "Contributions > Indicators",
        "chunk_index": 6,
        "total_chunks_in_section": 17,
        "start_char": 6150,
        "end_char": 7183,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.778489"
      },
      "char_count": 1033,
      "word_count": 111,
      "embedding": null
    },
    {
      "chunk_id": "09dcd8810cb570ba25c5d297258c8db3",
      "content": "TradeBarindicators useTradeBarobjects to compute their value. SomeTradeBarindicators use the volume property of theTradeBarto compute their value.\n\npublic class CustomTradeBarIndicator : TradeBarIndicator, IIndicatorWarmUpPeriodProvider\n{\npublic int WarmUpPeriod = 2;\npublic override bool IsReady => Samples >= WarmUpPeriod;\n\nprotected override decimal ComputeNextValue(TradeBar input)\n{\nreturn 1m;\n}\n\nprotected virtual IndicatorResult ValidateAndComputeNextValue(TradeBar input)\n{\nvar indicatorValue = ComputeNextValue(input);\nreturn IsReady ?\nnew IndicatorResult(indicatorValue) :\nnew IndicatorResult(indicatorValue, IndicatorStatus.ValueNotReady);\n}\n}\n\nTo view some exampleTradeBarindicators, see the implementation of the following indicators in the LEAN repository:\n\nBetaAdvanceDeclineIndicatorMassIndex\n\n### Define the Helper Method",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.3",
        "section_title": "Indicators",
        "section_path": "Contributions > Indicators",
        "chunk_index": 7,
        "total_chunks_in_section": 17,
        "start_char": 7185,
        "end_char": 8023,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.778498"
      },
      "char_count": 838,
      "word_count": 87,
      "embedding": null
    },
    {
      "chunk_id": "27247b6df719c5a0c3b7dc5f901fc612",
      "content": "### Define the Helper Method\n\nThe preceding indicator class is sufficient to instatiate amanual versionof the indicator.\nTo enable users to create anautomatic versionof the indicator, add a new method to theLean / Algorithm / QCAlgorithm.Indicators.csfile.\nName the method a short abbreviation of the indicator's full name.\nIn the method definition, call theInitializeIndicatormethod to create aconsolidatorand register the indicator for automatic updates with the consolidated data.\n\npublic CustomIndicator CI(Symbol symbol, Resolution? resolution = null, Func<IBaseData, IBaseDataBar> selector = null)\n{\nvar name = CreateIndicatorName(symbol, $\"CI()\", resolution);\nvar ci = new CustomIndicator(name, symbol);\nInitializeIndicator(symbol, ci, resolution, selector);\nreturn ci;\n}\n\n### Add Unit Tests\n\nUnit tests ensure your indicator functions correctly and produces accurate values.\nFollow these steps to add unit tests for your indicator:",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.3",
        "section_title": "Indicators",
        "section_path": "Contributions > Indicators",
        "chunk_index": 8,
        "total_chunks_in_section": 17,
        "start_char": 8025,
        "end_char": 8964,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.778508"
      },
      "char_count": 939,
      "word_count": 124,
      "embedding": null
    },
    {
      "chunk_id": "78b8991ba28f90b25995d025b7cc18ed",
      "content": "Unit tests ensure your indicator functions correctly and produces accurate values.\nFollow these steps to add unit tests for your indicator:\n\nSave thethird-party valuesin theLean / Tests / TestDatadirectory as aCSVfile.In theLean / Tests / QuantConnect.Tests.csprojfile, reference the new data file.<Content Include=\"TestData\\<filePath>.csv\">\n<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n</Content>Create aLean / Tests / Indicators / <IndicatorName>Tests.csfile with the following content:namespace QuantConnect.Tests.Indicators\n{\n[TestFixture]\npublic class CustomIndicatorTests : CommonIndicatorTests<T>\n{\nprotected override IndicatorBase<T> CreateIndicator()\n{\nreturn new CustomIndicator();\n}\n\nprotected override string TestFileName => \"custom_3rd_party_data.csv\";\n\nprotected override string TestColumnName => \"CustomIndicatorValueColumn\";",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.3",
        "section_title": "Indicators",
        "section_path": "Contributions > Indicators",
        "chunk_index": 9,
        "total_chunks_in_section": 17,
        "start_char": 8966,
        "end_char": 9823,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.778518"
      },
      "char_count": 857,
      "word_count": 85,
      "embedding": null
    },
    {
      "chunk_id": "11cc118f3bbe7759f55d730e8cbc13b1",
      "content": "protected override string TestColumnName => \"CustomIndicatorValueColumn\";\n\n// How do you compare the values\nprotected override Action<IndicatorBase<T>, double> Assertion\n{\nget { return (indicator, expected) => Assert.AreEqual(expected, (double)indicator.Current.Value, 1e-4); }        // allow 0.0001 error margin of indicator values\n}\n}\n}Set the values of theTestFileNameandTestColumnNameattributes to theCSVfile name and the column name of the testing values in the CSV file of third-party values, respectively.Add test cases.Test if the constructor,IsReadyflag, andResetmethod work. If there are other custom calculation methods in your indicator class, add a tests for them.\n\nThe following example shows the testing class structure:\n\nnamespace QuantConnect.Tests.Indicators\n{\n[TestFixture]\npublic class CustomIndicatorTests : CommonIndicatorTests<T>\n{\nprotected override IndicatorBase<T> CreateIndicator()\n{\nreturn new CustomIndicator();\n}\n\nprotected override string TestFileName => \"custom_3rd_party_data.csv\";\n\nprotected override string TestColumnName => \"CustomIndicatorValueColumn\";",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.3",
        "section_title": "Indicators",
        "section_path": "Contributions > Indicators",
        "chunk_index": 10,
        "total_chunks_in_section": 17,
        "start_char": 9825,
        "end_char": 10915,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.778527"
      },
      "char_count": 1090,
      "word_count": 125,
      "embedding": null
    },
    {
      "chunk_id": "644f37a73a932b10fe7099c3a7f3f4ee",
      "content": "protected override string TestColumnName => \"CustomIndicatorValueColumn\";\n\n// How do you compare the values\nprotected override Action<IndicatorBase<T>, double> Assertion\n{\nget { return (indicator, expected) => Assert.AreEqual(expected, (double)indicator.Current.Value, 1e-4); }        // allow 0.0001 error margin of indicator values\n}\n\n[Test]\npublic void IsReadyAfterPeriodUpdates()\n{\nvar ci = CreateIndicator();\n\nAssert.IsFalse(ci.IsReady);\nci.Update(DateTime.UtcNow, 1m);\nAssert.IsTrue(ci.IsReady);\n}\n\n[Test]\npublic override void ResetsProperly()\n{\nvar ci = CreateIndicator();\n\nci.Update(DateTime.UtcNow, 1m);\nAssert.IsTrue(ci.IsReady);\n\nci.Reset();\n\nTestHelper.AssertIndicatorIsInDefaultState(ci);\n}\n}\n}\n\nFor a full example, seeSimpleMovingAverageTests.csin the LEAN repository.\n\n### Documentation Changes\n\nAfter the indicator was merged in the Lean engine, make sure you also ensure it is porperly documented in the documentation. Follow the below steps to do so:",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.3",
        "section_title": "Indicators",
        "section_path": "Contributions > Indicators",
        "chunk_index": 11,
        "total_chunks_in_section": 17,
        "start_char": 10917,
        "end_char": 11885,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.778538"
      },
      "char_count": 968,
      "word_count": 109,
      "embedding": null
    },
    {
      "chunk_id": "0ef3eee4e9b5ba9c3b82bd74ad17b8ae",
      "content": "After the indicator was merged in the Lean engine, make sure you also ensure it is porperly documented in the documentation. Follow the below steps to do so:\n\nCreate an issue in theDocumentation GitHub repositoryregarding the required changes in the documentation.Fork the Documentation GitHub repository and create a new branch named byfeature-<ISSUE_NUMBER>-<INDICATOR_NAME>-indicator.Edit theIndicatorImageGenerator.pyfile to include the details of the newly added indicator for documentation page generation.If the indicator only involves 1 symbol and does not depend on other indicators, put it under theindicatorsdictionary.If the indicator involves 2 or more symbols or it is a composite indicator, put it under thespecial_indicatorsdictionary.If the indicator is an option-related indicator (e.g. option greeks indicator), put it under theoption_indicatorsdictionary.Format of the added member should be as below:'<hyphenated-title-case-of-the-indicator>':\n{\n'code': <IndicatorConstructor>(<constructor-arguments>),\n'title' : '<CSharpHelperMethod>(<helper-method-arguments>)',\n'columns' : [<any-extra-series-of-the-indicator>]\n},Save the file and run theAPI generator. It will help generate the indicator reference page.(Optional) Run theIndicatorImageGenerator.pyin LeanCLI to obtain the generated plotly image of the indicator. You can retreive it from thestoragefolder from the root directory of the LeanCLI. Put it in theResource indicator image folderby the name<hyphenated-title-case-of-the-indicator>.Push the branch and start apull requeston the documentation changes.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.3",
        "section_title": "Indicators",
        "section_path": "Contributions > Indicators",
        "chunk_index": 12,
        "total_chunks_in_section": 17,
        "start_char": 11887,
        "end_char": 13471,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.778548"
      },
      "char_count": 1584,
      "word_count": 189,
      "embedding": null
    },
    {
      "chunk_id": "2fcb9f3c7e7c3c0e050b0163f855dab8",
      "content": "Create an issue in theDocumentation GitHub repositoryregarding the required changes in the documentation.Fork the Documentation GitHub repository and create a new branch named byfeature-<ISSUE_NUMBER>-<INDICATOR_NAME>-indicator.Edit theIndicatorImageGenerator.pyfile to include the details of the newly added indicator for documentation page generation.If the indicator only involves 1 symbol and does not depend on other indicators, put it under theindicatorsdictionary.If the indicator involves 2 or more symbols or it is a composite indicator, put it under thespecial_indicatorsdictionary.If the indicator is an option-related indicator (e.g. option greeks indicator), put it under theoption_indicatorsdictionary.Format of the added member should be as below:'<hyphenated-title-case-of-the-indicator>':\n{\n'code': <IndicatorConstructor>(<constructor-arguments>),\n'title' : '<CSharpHelperMethod>(<helper-method-arguments>)',\n'columns' : [<any-extra-series-of-the-indicator>]\n},Save the file and run theAPI generator. It will help generate the indicator reference page.(Optional) Run theIndicatorImageGenerator.pyin LeanCLI to obtain the generated plotly image of the indicator. You can retreive it from thestoragefolder from the root directory of the LeanCLI. Put it in theResource indicator image folderby the name<hyphenated-title-case-of-the-indicator>.Push the branch and start apull requeston the documentation changes.\n\n### Extra Steps for Moving Average Types",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.3",
        "section_title": "Indicators",
        "section_path": "Contributions > Indicators",
        "chunk_index": 13,
        "total_chunks_in_section": 17,
        "start_char": 13473,
        "end_char": 14940,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.778563"
      },
      "char_count": 1467,
      "word_count": 168,
      "embedding": null
    },
    {
      "chunk_id": "e183847be5f439d701076d400c4a7ee6",
      "content": "### Extra Steps for Moving Average Types\n\nA moving average is a special type of indicator that smoothes out the fluctuations in a security's price or market data.\nIt calculates the average value of a security's price over a specified period with a special smoothing function, helping traders to identify trends and reduce noise.\nMoving averages can also be used in conjunction with other technical indicators to make more informed trading decisions and identify potential support or resistance levels in the market.\nLEAN has extra abstraction interface for indicators to implement a specific type of moving average.\nTheMovingAverageTypeenumeration currently has the following members:\n\nIf you are contributing an indicator that requires a new moving average type, follow these additional steps:",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.3",
        "section_title": "Indicators",
        "section_path": "Contributions > Indicators",
        "chunk_index": 14,
        "total_chunks_in_section": 17,
        "start_char": 14942,
        "end_char": 15736,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.778576"
      },
      "char_count": 794,
      "word_count": 120,
      "embedding": null
    },
    {
      "chunk_id": "c9178df1c90f2007c77f8ea3817fa28f",
      "content": "If you are contributing an indicator that requires a new moving average type, follow these additional steps:\n\nIn theLean / Indicators / MovingAverageType.csfile, define a newMovingAverageTypeenumeration member.namespace QuantConnect.Indicators\n{\npublic enum MovingAverageType\n{\n...\n/// <summary>\n/// Description of the custom moving average indicator (<the next enum number>)\n/// </summary>\n<CustomMovingAverageEnum>,\n}\n}In theLean / Indicators / MovingAverageTypeExtensions.csfile, add a new case of your custom moving average indicator in eachAsIndicatormethod.namespace QuantConnect.Indicators\n{\npublic static class MovingAverageTypeExtensions\n{\npublic static IndicatorBase<IndicatorDataPoint> AsIndicator(this MovingAverageType movingAverageType, int period)\n{\nswitch (movingAverageType)\n{\n...\ncase MovingAverageType.CustomMovingAverageEnum:\nreturn new CustomMovingAverage(period);\n}\n}",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.3",
        "section_title": "Indicators",
        "section_path": "Contributions > Indicators",
        "chunk_index": 15,
        "total_chunks_in_section": 17,
        "start_char": 15738,
        "end_char": 16627,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.778585"
      },
      "char_count": 889,
      "word_count": 97,
      "embedding": null
    },
    {
      "chunk_id": "5ec42d1647b9a598ec5ac419c36e9f26",
      "content": "In theLean / Indicators / MovingAverageType.csfile, define a newMovingAverageTypeenumeration member.namespace QuantConnect.Indicators\n{\npublic enum MovingAverageType\n{\n...\n/// <summary>\n/// Description of the custom moving average indicator (<the next enum number>)\n/// </summary>\n<CustomMovingAverageEnum>,\n}\n}In theLean / Indicators / MovingAverageTypeExtensions.csfile, add a new case of your custom moving average indicator in eachAsIndicatormethod.namespace QuantConnect.Indicators\n{\npublic static class MovingAverageTypeExtensions\n{\npublic static IndicatorBase<IndicatorDataPoint> AsIndicator(this MovingAverageType movingAverageType, int period)\n{\nswitch (movingAverageType)\n{\n...\ncase MovingAverageType.CustomMovingAverageEnum:\nreturn new CustomMovingAverage(period);\n}\n}\n\npublic static IndicatorBase<IndicatorDataPoint> AsIndicator(this MovingAverageType movingAverageType, string name, int period)\n{\nswitch (movingAverageType)\n{\n...\ncase MovingAverageType.CustomMovingAverageEnum:\nreturn new CustomMovingAverage(name, period);\n}\n}\n}\n}In theLean / Tests/ Indicators / MovingAverageTypeExtensionsTests.csfile, add a new test case of your custom moving average indicator that asserts the indicator is  correctly instantiated through the abstraction methods.namespace QuantConnect.Tests.Indicators\n{\n[TestFixture]\npublic class MovingAverageTypeExtensionsTests\n{\n[Test]\npublic void CreatesCorrectAveragingIndicator()\n{\n...\nvar indicator = MovingAverageType.CustomMovingAverageEnum.AsIndicator(1);\nAssert.IsInstanceOf(typeof(CustomMovingAverage), indicator);\n...\nstring name = string.Empty;\n...\nindicator = MovingAverageType.CustomMovingAverageEnum.AsIndicator(name, 1);\nAssert.IsInstanceOf(typeof(CustomMovingAverage), indicator);\n}\n}\n}",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "2.3",
        "section_title": "Indicators",
        "section_path": "Contributions > Indicators",
        "chunk_index": 16,
        "total_chunks_in_section": 17,
        "start_char": 16629,
        "end_char": 18370,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "2",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.778594"
      },
      "char_count": 1741,
      "word_count": 167,
      "embedding": null
    },
    {
      "chunk_id": "a67c2571be91a581767b474277a51e81",
      "content": "[Section 3.1: Key Concepts]\n\n### Introduction\n\nFrom the beginning, LEAN has strived to use an open, human-readable data format - independent of any specific database or file format. From this core philosophy, we built LEAN to read its financial data from flat files on disk. Data compression is done in zip format, and all individual files are CSV or JSON.\n\nThe prices are expressed in the assetquote currency. For example, the value 0.06920 for ETHBTC is the amount of BTC, the quote currency, you need to buy 1 ETH.\n\nWhen there is no activity for a security, the price is omitted from the file. Only new ticks and price changes are recorded.\n\n### Folder Structure\n\nData files are separated and nested in a few predictable layers:\n\nTick, Second and Minute:/data/securityType/marketName/resolution/ticker/date_tradeType.zipHour, Daily:/data/securityType/marketName/resolution/ticker.zip\n\nThemarketNamevalue is used to separate different tradable assets with the same ticker. E.g. BTCUSDT is traded on multiple brokerages all with slightly different prices.\n\n### Price Representation",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "3.1",
        "section_title": "Key Concepts",
        "section_path": "Data Format > Key Concepts",
        "chunk_index": 0,
        "total_chunks_in_section": 2,
        "start_char": 0,
        "end_char": 1082,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "3",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.778830"
      },
      "char_count": 1082,
      "word_count": 158,
      "embedding": null
    },
    {
      "chunk_id": "a8a38e382dddfc251eec64d0e30e7568",
      "content": "### Price Representation\n\nThe prices are expressed in the assetquote currency. For example, the value 0.06920 for ETHBTC is the amount of BTC, the quote currency, you need to buy 1 ETH.\n\nWhen there is no activity for a security, the price is omitted from the file. Only new ticks and price changes are recorded.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "3.1",
        "section_title": "Key Concepts",
        "section_path": "Data Format > Key Concepts",
        "chunk_index": 1,
        "total_chunks_in_section": 2,
        "start_char": 1084,
        "end_char": 1395,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "3",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.778843"
      },
      "char_count": 311,
      "word_count": 55,
      "embedding": null
    },
    {
      "chunk_id": "58dc43abd249ec301be59618db99830d",
      "content": "[Section 3.2: Core Data Types]\n\n### Introduction\n\nThis page shows the file schema of the core data types represented insupported asset classes.\n\n### Trade Tick\n\nTickofTickType.TradeQuoterepresents an individual record of trades for an asset. Tick data does not have a period.\n\nThe file schema is as follows:\n\n[Table - 6 rows]\n\nThe trade has one of the followingQuoteConditionFlags:\n\n[Table - 12 rows]\n\nSee more information in theAlgoSeek whitepaper.\n\n### Quote Tick\n\nTickofTickType.QuoteQUOTErepresents an individual record of quote updates for an asset. Tick data does not have a period.\n\nThe file schema is as follows:\n\n[Table - 8 rows]\n\nThe quote has one of the followingQuoteConditionFlags:\n\n[Table - 12 rows]\n\nSee more information in theAlgoSeek whitepaper.\n\n### Trade Bar\n\nTradeBarrepresents trade ticks of assets consolidated for a period.\n\nThe file schema is as follows:\n\n[Table - 6 rows]\n\n### Quote Bar\n\nQuoteBarrepresents top of book quote data consolidated over a period of time (bid and ask bar).\n\nThe file schema is as follows:\n\n[Table - 11 rows]\n\n### Open Interest\n\nOpenIntestrepresents the outstanding contracts.\n\nThe file schema is as follows:\n\n[Table - 1 rows]",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "3.2",
        "section_title": "Core Data Types",
        "section_path": "Data Format > Core Data Types",
        "chunk_index": 0,
        "total_chunks_in_section": 1,
        "start_char": 0,
        "end_char": 1177,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "3",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.779094"
      },
      "char_count": 1177,
      "word_count": 183,
      "embedding": null
    },
    {
      "chunk_id": "a5aa15e9e94dfbe91d986e8030fac249",
      "content": "[Section 4.1: Capacity]\n\n### Introduction\n\nCapacity is a measure of how much capital a strategy can trade before the performance of the strategy degrades from market impact. The capacity calculation is done on a rolling basis with one snapshot taken at the end of each week. This page outlines how LEAN performs the entire calculation.\n\n### Security Capacity\n\nThe first step to determine the capacity of the strategy is to compute the capacity of each security the strategy trades.\n\nMarket Capacity Dollar Volume\n\nFollowing each order fill, LEAN monitors and records the dollar-volume for a series of bars. To get an estimate of the available capacity, we combine many second and minute trade bars together. For hourly or daily data resolutions, we only use one bar.\n\n_marketCapacityDollarVolume += bar.Close * _fastTradingVolumeDiscountFactor * bar.Volume * conversionRate * Security.SymbolProperties.ContractMultiplier;\n\nCrypto Volume\n\nCrypto trade volume is light, but there is significant capacity even at the very top of the order book. The estimated volume of Crypto is based on the average size on the bid and ask.\n\nForex and CFD Volume",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "4.1",
        "section_title": "Capacity",
        "section_path": "Statistics > Capacity",
        "chunk_index": 0,
        "total_chunks_in_section": 6,
        "start_char": 0,
        "end_char": 1143,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "4",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.779793"
      },
      "char_count": 1143,
      "word_count": 178,
      "embedding": null
    },
    {
      "chunk_id": "d8172e237a96d05ccb58c2beca00b2a9",
      "content": "Forex and CFD Volume\n\nForex and CFD assets do not have a trade volume or quote size information so they were approximated as deeply liquid assets with approximately $25,000,000 depth per minute.\n\nVolume Accumulation Period\n\nThe number of bars we use to calculate the market volume estimate depends on the asset liquidity. The following table shows the formulas LEAN uses to determine how long of a period the market capacity dollar volume is accumulated for after each order fill, as a function of the security resolution. The $AvgDollarVolume$ in the table represents the average dollar volume per minute for the security you're trading. Notice that for the edge case where the average dollar volume is zero, the calculations use 10 minutes of data.\n\n[Table - 4 rows]\n\nOnly a fraction of the market capacity dollar volume is available to be taken by a strategy’s orders because there are other market participants. The data resolution of the security determines how much of the market capacity dollar volume is available for the strategy to consume. The following table shows what percentage of the market capacity dollar volume is available for each of the data resolutions:\n\n[Table - 5 rows]",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "4.1",
        "section_title": "Capacity",
        "section_path": "Statistics > Capacity",
        "chunk_index": 1,
        "total_chunks_in_section": 6,
        "start_char": 1145,
        "end_char": 2339,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "4",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.779811"
      },
      "char_count": 1194,
      "word_count": 197,
      "embedding": null
    },
    {
      "chunk_id": "a26c82c685fc04ff1e505e7796ffc3df",
      "content": "[Table - 5 rows]\n\nFast Trading Volume Discount Factor\n\nTo accommodate high-frequency trading strategies, the_fastTradingVolumeDiscountFactorvariable scales down the market capacity dollar volume of the security proportional to the number of trades that it places per day for the security. The more frequently the strategy trades a security, the lower the capacity of the security goes since it becomes harder to get into a larger position without incurring significant market impact. The formula that LEAN uses to discount the capacity of the securities that the algorithm trades intraday is\n\n\\[ d_i = \\left\\{\n\\begin{array}{ c l }\n1,& \\text{if } i = 1\\\\\n\\min(1, \\max(0.2, d_{i-1} * \\frac{m}{390})), & \\text{if } i > 1\n\\end{array}\n\\right. \\]\n\nwhere \\( d_i\\in{[0.2, 1]} \\) is the fast trading volume discount factor after order \\(i\\) and \\(m\\) is the number of minutes since order \\( i-1 \\) was filled. We divide \\( m \\) by 390 because there are \\( 390 = 6.5 * 60 \\) minutes of trading in a regular Equity trading day.\n\nSale Volume",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "4.1",
        "section_title": "Capacity",
        "section_path": "Statistics > Capacity",
        "chunk_index": 2,
        "total_chunks_in_section": 6,
        "start_char": 2341,
        "end_char": 3370,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "4",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.779828"
      },
      "char_count": 1029,
      "word_count": 173,
      "embedding": null
    },
    {
      "chunk_id": "b9823de6e2ebd3fbc409914fddf47553",
      "content": "Sale Volume\n\nIn addition to the market capacity dollar volume, for each security the strategy trades, LEAN also accumulates the weekly sale volume of the order fills. The sale volume scales down the weekly snapshot capacity.\n\nSaleVolume += orderEvent.FillPrice * orderEvent.AbsoluteFillQuantity * Security.SymbolProperties.ContractMultiplier;\n\n### Portfolio Capacity\n\nNow that we have the values to calculate the capacity of each security, we can compute the capacity of the portfolio.\n\nSnapshot Capacity",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "4.1",
        "section_title": "Capacity",
        "section_path": "Statistics > Capacity",
        "chunk_index": 3,
        "total_chunks_in_section": 6,
        "start_char": 3372,
        "end_char": 3876,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "4",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.779839"
      },
      "char_count": 504,
      "word_count": 69,
      "embedding": null
    },
    {
      "chunk_id": "0bf6d6a0ec43bdad12c80be591868f5f",
      "content": "Snapshot Capacity\n\nTo calculate the strategy capactiy, weekly snapshots are taken. When it’s time to take a snapshot, the capacity of the strategy for the current snapshot is calculated by first selecting the security with the least market capacity dollar volume available. The fraction of trading volume that was available for this security is scaled down by the number of orders that were filled for the security during the week. The result is scaled down further by the largest value between the weight of the security’s sale volume in the portfolio sale volume and the weight of the security’s holding value in the total portfolio value. The result of this final scaling is the strategy’s capacity in the current snapshot.\n\n\\[ Snapshot \\ Capacity = \\frac{\\frac{Market \\ Capacity \\ Dollar \\ Volume}{Number \\ Of \\ Trades}}{\\max(\\frac{Sale \\ Volume}{Portfolio \\ Sale \\ Volume}, \\frac{Buying \\ Power \\ Used}{Total \\ Portfolio \\ Value})} \\]\n\nWhen any of the denominators are 0 in the preceding formula, the quotient that the denominator is part of defaults to a value of 0. After the snapshot is taken, the sale volume and market capacity dollar volume of each security is reset to 0.\n\nStrategy Capacity",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "4.1",
        "section_title": "Capacity",
        "section_path": "Statistics > Capacity",
        "chunk_index": 4,
        "total_chunks_in_section": 6,
        "start_char": 3878,
        "end_char": 5080,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "4",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.779846"
      },
      "char_count": 1202,
      "word_count": 199,
      "embedding": null
    },
    {
      "chunk_id": "7ba1a735116a2d856879090a79e9c0f8",
      "content": "Strategy Capacity\n\nInstead of using the strategy’s capacity at the current snapshot as the final strategy capacity value, the strategy capacity is smoothed across the weekly snapshots. First, the capacity estimate of the current snapshot is calculated, then the final strategy capacity value is set using the following exponentially-weighted model:\n\n\\[ Strategy \\ Capacity = \\left\\{\n\\begin{array}{ c l }\nS_{i},& \\text{if } i = 1\\\\\n0.66 * S_{i-1} + 0.33 * S_{i}, & \\text{if } i > 1\n\\end{array}\n\\right. \\]\n\nwhere \\( S_i \\) is the snapshot capacity of week \\(i\\).\n\n### Summary\n\nStrategies that have a larger capacity are able to trade more capital without suffering from significant market impact. In general, a strategy that trades a large weight of the portfolio in liquid securities with high volume will have a large capacity. To avoid reducing the strategy capacity too much, only trade a small portion of your portfolio in illiquid assets with low volume.",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "4.1",
        "section_title": "Capacity",
        "section_path": "Statistics > Capacity",
        "chunk_index": 5,
        "total_chunks_in_section": 6,
        "start_char": 5082,
        "end_char": 6040,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": "4",
        "level": 2,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.779859"
      },
      "char_count": 958,
      "word_count": 158,
      "embedding": null
    },
    {
      "chunk_id": "8a821b149e9ecacf9630fa2bcd7957a9",
      "content": "[Section 5: Class Reference]\n\n[Metadata: link - Class Reference]",
      "metadata": {
        "source_file": "Quantconnect-Lean-Engine.html",
        "document_index": 1,
        "section_id": "5",
        "section_title": "Class Reference",
        "section_path": "Class Reference",
        "chunk_index": 0,
        "total_chunks_in_section": 1,
        "start_char": 0,
        "end_char": 64,
        "chunk_type": "text",
        "language": null,
        "has_code": false,
        "has_table": false,
        "parent_section_id": null,
        "level": 1,
        "chunking_strategy": null,
        "overlap_with_previous": 0,
        "overlap_with_next": 0,
        "created_at": "2025-05-28T11:03:07.779898"
      },
      "char_count": 64,
      "word_count": 9,
      "embedding": null
    }
  ]
}